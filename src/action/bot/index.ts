'use server'

import { client } from '@/lib/prisma'
import { onRealTimeChat } from '../conversation'
import { clerkClient } from '@clerk/nextjs'
import { extractEmailsFromString, extractURLfromString } from '@/lib/utils'
import { onMailer } from '../mailer'
import OpenAi from 'openai'
import { TEXTILE_MESSAGES } from '@/constants/services'
import {
  generateSessionToken,
  getCustomerFromToken
} from '@/lib/session'

const openai = new OpenAi({
  apiKey: process.env.OPEN_AI_KEY,
})

// ============================================
// OPTIMIZACI√ìN: Limitar contexto para reducir tokens
// ============================================
/**
 * Obtiene solo los mensajes relevantes del historial
 * Reduce consumo de tokens en 70-90%
 */
const getRelevantChatHistory = (
  chat: { role: 'user' | 'assistant'; content: string }[],
  maxMessages: number = 10 // Solo √∫ltimos 10 mensajes
) => {
  if (chat.length <= maxMessages) {
    return chat
  }

  // Tomar primer mensaje (contexto inicial) + √∫ltimos N mensajes
  const firstMessage = chat[0]
  const recentMessages = chat.slice(-maxMessages)

  return [firstMessage, ...recentMessages]
}

export const onStoreConversations = async (
  id: string,
  message: string,
  role: 'user' | 'assistant',
  userMessage?: string
) => {
  // Si es una respuesta del asistente, calcular m√©tricas de tiempo
  if (role === 'assistant') {
    // Obtener el √∫ltimo mensaje del usuario
    const lastUserMessage = await client.chatMessage.findFirst({
      where: {
        chatRoomId: id,
        role: 'user',
      },
      orderBy: {
        createdAt: 'desc',
      },
      select: {
        id: true,
        createdAt: true,
        message: true,
      },
    })

    if (lastUserMessage) {
      const now = new Date()
      const responseTimeInSeconds = Math.floor(
        (now.getTime() - lastUserMessage.createdAt.getTime()) / 1000
      )

      // FR2: Evaluar efectividad de la respuesta
      const isEffective = await isResponseEffective(
        id,
        userMessage || lastUserMessage.message,
        message
      )

      await client.chatRoom.update({
        where: { id },
        data: {
          message: {
            create: {
              message,
              role,
              responseTime: responseTimeInSeconds,
              respondedWithin2Hours: isEffective, // FR2: Ahora significa "respondido efectivamente"
            },
          },
        },
      })

      // Actualizar m√©tricas con efectividad en lugar de solo tiempo
      await updateConversationMetrics(id, responseTimeInSeconds, isEffective)

      return
    }
  }

  // Para mensajes del usuario o si no hay mensaje previo
  await client.chatRoom.update({
    where: { id },
    data: {
      message: {
        create: {
          message,
          role,
        },
      },
    },
  })
}

export const onGetCurrentChatBot = async (idOrName: string) => {
  try {
    // Verificar si es un UUID (ID) o un nombre
    const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(idOrName)

    const chatbot = await client.domain.findFirst({
      where: isUUID ? {
        id: idOrName,
      } : {
        name: idOrName,
      },
      select: {
        id: true,
        helpdesk: true,
        name: true,
        chatBot: {
          select: {
            id: true,
            welcomeMessage: true,
            icon: true,
            textColor: true,
            background: true,
            helpdesk: true,
          },
        },
        // ‚úÖ AGREGAR INFORMACI√ìN DE CHATROOM PARA EL TOGGLE
        customer: {
          select: {
            chatRoom: {
              select: {
                id: true,
                conversationState: true,
                live: true,
              },
              orderBy: {
                createdAt: 'desc'
              },
              take: 1
            }
          }
        }
      },
    })

    if (chatbot) {
      return chatbot
    }
  } catch (error) {
    console.log('Error en onGetCurrentChatBot:', error)
  }
}

// ===== TIPOS Y INTERFACES =====
interface CustomerData {
  email?: string
  name?: string
  phone?: string
}

interface ChatBotDomain {
  name: string
  helpdesk: Array<{ question: string; answer: string }>
  products: Array<{
    name: string
    price: number
    image: string
    salePrice?: number | null
    description?: string | null
    color?: string | null
    width?: string | null
    weight?: string | null
    stock: number
    material?: { name: string } | null
    texture?: { name: string } | null
    category?: { name: string } | null
    season?: { name: string } | null
    uses: Array<{ use: { name: string } }>
    features: Array<{ feature: { name: string } }>
  }>
  filterQuestions: Array<{ question: string }>
  categories: Array<{ name: string }>
  materials: Array<{ name: string }>
  textures: Array<{ name: string }>
  seasons: Array<{ name: string }>
  uses: Array<{ name: string }>
  features: Array<{ name: string }>
}

interface CustomerInfo {
  id: string
  email: string
  questions: any[]
  chatRoom: Array<{ id: string; live: boolean; mailed: boolean }>
}

// ============================================
// DETECCI√ìN DE ESCALACI√ìN A HUMANO
// ============================================
/**
 * ‚úÖ Detecta autom√°ticamente cuando el cliente quiere hablar con un humano
 */
const detectHumanTransferRequest = (message: string): boolean => {
  const humanKeywords = [
    'humano', 'persona', 'agente', 'operador', 'representante',
    'hablar con alguien', 'hablar con una persona', 'hablar con un humano',
    'quiero hablar con', 'necesito hablar con', 'puedo hablar con',
    'p√°same con', 'pasame con', 'p√°same a', 'pasame a',
    'conectame con', 'con√©ctame con', 'conecta con', 'conecta me',
    'escalar', 'transferir', 'no me ayuda', 'no entiendo',
    'problema', 'queja', 'reclamo', 'urgente', 'emergencia',
    'supervisor', 'gerente', 'jefe', 'ayuda humana'
  ]

  const lowerMessage = message.toLowerCase()
  return humanKeywords.some(keyword => lowerMessage.includes(keyword))
}

// ============================================
// OPTIMIZACI√ìN: Respuestas r√°pidas sin OpenAI
// ============================================
/**
 * ‚úÖ SIMPLIFICADO: Genera respuestas instant√°neas para casos comunes
 * Reduce latencia de 2-5s a 50ms y ahorra tokens
 */
const getQuickResponse = (
  message: string,
  customerInfo: any,
  domainId: string
): { content: string; link?: string } | null => {
  const lowerMsg = message.toLowerCase().trim()

  // 1. Agendamiento de citas
  if (/\b(agendar|cita|reservar|reserva|appointment)\b/.test(lowerMsg)) {
    return {
      content: '¬°Perfecto! Aqu√≠ tienes el enlace para agendar tu cita:',
      link: `http://localhost:3000/portal/${domainId}/appointment/${customerInfo.id}`
    }
  }

  // 2. Saludos simples
  if (/^(hola|hi|hey|buenos d√≠as|buenas tardes|buenas noches|qu√© tal)\.?$/i.test(lowerMsg)) {
    return {
      content: `¬°Hola ${customerInfo.name || ''}! Soy Lunari AI. üòä`
    }
  }

  // 3. Horarios
  if (/\b(horario|hora de atenci√≥n|cu√°ndo abren|est√° abierto|abren)\b/.test(lowerMsg)) {
    return {
      content: 'Nuestro horario de atenci√≥n es de lunes a viernes de 9:00 AM a 6:00 PM.'
    }
  }

  // 4. Ubicaci√≥n
  if (/\b(d√≥nde est√°n|ubicaci√≥n|direcci√≥n|c√≥mo llego)\b/.test(lowerMsg)) {
    return {
      content: 'Nos ubicamos en [Direcci√≥n].'
    }
  }

  // No hay respuesta r√°pida
  return null
}

// ============================================
// GESTI√ìN DE SESIONES AUTENTICADAS
// ============================================

/**
 * Maneja la conversaci√≥n de un usuario con sesi√≥n v√°lida
 * Este usuario ya est√° identificado, no necesita proporcionar datos
 */
const handleAuthenticatedUser = async (
  customerInfo: any,
  message: string,
  author: 'user',
  chat: { role: 'user' | 'assistant'; content: string }[],
  domainId: string,
  chatBotDomain: any,
  sessionToken: string
) => {

  // ‚úÖ SOLO PROCESAR TERMINACI√ìN SI NO EST√Å EN MODO HUMANO
  if (!customerInfo.chatRoom[0].live) {
    // ‚úÖ NUEVA L√ìGICA: Usar IA para detectar si el usuario quiere terminar
    const shouldEndConversation = await detectConversationEndingWithAI(message, chat)

    if (shouldEndConversation) {
      // Guardar mensaje del usuario
      await onStoreConversations(customerInfo.chatRoom[0].id, message, 'user')

      // Solicitar calificaci√≥n de forma simple
      const ratingMessage = `¬°Perfecto! Me alegra haberte ayudado. üòä

Antes de que te vayas, ¬øpodr√≠as calificar tu experiencia del 1 al 5?

‚≠ê 1 = Muy insatisfecho
‚≠ê 5 = Muy satisfecho

Tu opini√≥n nos ayuda a mejorar.`

      // Guardar solicitud de feedback
      await onStoreConversations(customerInfo.chatRoom[0].id, ratingMessage, 'assistant', message)

      // Marcar como esperando calificaci√≥n
      await client.chatRoom.update({
        where: { id: customerInfo.chatRoom[0].id },
        data: {
          conversationState: 'AWAITING_RATING',
          resolved: true
        }
      })

      return {
        response: {
          role: 'assistant',
          content: ratingMessage
        },
        sessionToken
      }
    }
  }

  // 0.1 ‚úÖ Actualizar √∫ltima actividad del usuario
  await updateUserActivity(customerInfo.chatRoom[0].id)

  // 0.2 ‚úÖ Verificar estado de la conversaci√≥n (SIN crear nuevas conversaciones)
  const conversationState = await handleConversationState(
    customerInfo.chatRoom[0].id,
    customerInfo.id,
    chatBotDomain.chatBot?.welcomeMessage || '¬°Hola! ¬øEn qu√© puedo ayudarte?'
  )

  // ‚úÖ NUEVA L√ìGICA: NO crear nuevas conversaciones, mantener la misma
  // Si la conversaci√≥n est√° ENDED, simplemente reactivarla
  if (conversationState.shouldStartNew) {
    // Reactivar la conversaci√≥n existente en lugar de crear una nueva
    await client.chatRoom.update({
      where: { id: customerInfo.chatRoom[0].id },
      data: {
        conversationState: 'ACTIVE',
        lastUserActivityAt: new Date(),
        resolved: false
      }
    })

    // Si hay mensaje de bienvenida, mostrarlo
    if (conversationState.message) {
      return {
        response: {
          role: 'assistant',
          content: conversationState.message
        },
        sessionToken
      }
    }
  }

  // 1. FR4: Detectar si el usuario est√° calificando (1-5)
  const satisfactionRating = detectSatisfactionRating(message)
  if (satisfactionRating) {
    // ‚úÖ Guardar mensaje de calificaci√≥n del usuario
    await onStoreConversations(customerInfo.chatRoom[0].id, message, 'user')

    // ‚úÖ ENVIAR MENSAJE DEL USUARIO INMEDIATAMENTE (ANTES DEL PROCESAMIENTO)
    if (customerInfo.chatRoom[0].live) {
      await onRealTimeChat(
        customerInfo.chatRoom[0].id,
        message,
        `user-${Date.now()}`,
        'user'
      )
    }

    await saveSatisfactionRating(
      customerInfo.chatRoom[0].id,
      customerInfo.id,
      domainId,
      satisfactionRating,
      message
    )

    // ‚úÖ VERIFICAR SI ESTABA ESPERANDO CALIFICACI√ìN PARA ESCALAR
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: customerInfo.chatRoom[0].id },
      select: { conversationState: true }
    })

    if (chatRoom?.conversationState === 'AWAITING_RATING') {
      // ‚úÖ ESCALAR A HUMANO DESPU√âS DE LA CALIFICACI√ìN
      await client.chatRoom.update({
        where: { id: customerInfo.chatRoom[0].id },
        data: {
          live: true,
          conversationState: 'ESCALATED' as any
        }
      })

      // ‚úÖ ENVIAR EMAIL AL DUE√ëO CUANDO SE ESCALA A HUMANO
      try {
        const domainOwner = await client.domain.findFirst({
          where: { id: domainId }, // ‚úÖ Usar el domainId del par√°metro
          select: {
            User: {
              select: {
                clerkId: true
              }
            }
          }
        })

        if (domainOwner?.User?.clerkId) {
          const user = await clerkClient.users.getUser(domainOwner.User.clerkId)
          await onMailer(
            user.emailAddresses[0].emailAddress,
            customerInfo.name || 'Cliente',
            customerInfo.email
          )
        }
      } catch (error) {
        console.error('‚ùå Error enviando email de escalaci√≥n:', error)
      }

      const transferMessage = `¬°Muchas gracias por tu calificaci√≥n de ${satisfactionRating}/5! üòä

Ahora te estoy conectando con uno de nuestros agentes humanos. Un miembro de nuestro equipo se pondr√° en contacto contigo en breve. üë®‚Äçüíº`

      await onStoreConversations(customerInfo.chatRoom[0].id, transferMessage, 'assistant', message)

      return {
        response: {
          role: 'assistant',
          content: transferMessage
        },
        live: true,
        chatRoom: customerInfo.chatRoom[0].id,
        sessionToken
      }
    } else {
      // ‚úÖ CALIFICACI√ìN NORMAL (terminar conversaci√≥n)
      await markConversationAsEnded(customerInfo.chatRoom[0].id)

      const thankYouMessage = `¬°Muchas gracias por tu calificaci√≥n de ${satisfactionRating}/5! Tu opini√≥n es muy importante para nosotros y nos ayuda a mejorar nuestro servicio. üòä

¬øTienes alguna otra consulta o necesitas ayuda con algo m√°s?`

      await onStoreConversations(customerInfo.chatRoom[0].id, thankYouMessage, 'assistant', message)

      return {
        response: {
          role: 'assistant',
          content: thankYouMessage
        },
        sessionToken
      }
    }
  }

  // 2. Manejar modo tiempo real si est√° activo
  if (customerInfo.chatRoom[0].live) {
    await onStoreConversations(customerInfo.chatRoom[0].id, message, author)

    return {
      live: true,
      chatRoom: customerInfo.chatRoom[0].id,
      sessionToken // Mantener token
    }
  }

  // 3. ‚úÖ NUEVO: Preparar mensajes para guardar chat completo
  const messagesToSave: {
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
    responseTime?: number;
    respondedWithin2Hours?: boolean
  }[] = [
      {
        role: 'user' as const,
        content: message,
        timestamp: new Date(),
        responseTime: undefined,
        respondedWithin2Hours: undefined
      }
    ]

  // ‚úÖ 4. DETECCI√ìN DE TRANSFERENCIA A HUMANO
  if (detectHumanTransferRequest(message)) {
    console.log(`üö® Solicitud de transferencia detectada: "${message}"`)

    // Guardar mensaje del usuario
    await client.chatMessage.create({
      data: {
        message,
        role: 'user',
        chatRoomId: customerInfo.chatRoom[0].id,
        responseTime: 0,
        respondedWithin2Hours: true
      }
    })

    // ‚úÖ SOLICITAR CALIFICACI√ìN ANTES DE ESCALAR
    const transferMessage = `Te comunicar√°s con un humano en breve. üòä

Antes de transferirte, ¬øpodr√≠as calificar mi ayuda del 1 al 5?

‚≠ê 1 = Muy insatisfecho
‚≠ê 5 = Muy satisfecho

Tu opini√≥n me ayuda a mejorar.`

    // Guardar mensaje de transferencia
    await client.chatMessage.create({
      data: {
        message: transferMessage,
        role: 'assistant',
        chatRoomId: customerInfo.chatRoom[0].id,
        responseTime: 0,
        respondedWithin2Hours: true
      }
    })

    // ‚úÖ ENVIAR EMAIL AL DUE√ëO INMEDIATAMENTE CUANDO CLIENTE PIDE HUMANO
    try {
      const domainOwner = await client.domain.findFirst({
        where: { id: domainId }, // ‚úÖ Usar el domainId del par√°metro
        select: {
          User: {
            select: {
              clerkId: true
            }
          }
        }
      })
      console.log("üöÄ ~ domainOwner:", domainOwner)

      if (domainOwner?.User?.clerkId) {
        const user = await clerkClient.users.getUser(domainOwner.User.clerkId)
        console.log("üöÄ ~ user:", user)
        await onMailer(
          user.emailAddresses[0].emailAddress,
          customerInfo.name || 'Cliente',
          customerInfo.email
        )
      }
    } catch (error) {
      console.error('‚ùå Error enviando email de solicitud de humano:', error)
    }

    // Marcar como esperando calificaci√≥n antes de escalar
    await client.chatRoom.update({
      where: { id: customerInfo.chatRoom[0].id },
      data: {
        conversationState: 'AWAITING_RATING' as any // ‚úÖ Esperar calificaci√≥n antes de escalar
      }
    })

    console.log(`üö® SOLICITUD DE CALIFICACI√ìN ANTES DE ESCALAR: Chat ${customerInfo.chatRoom[0].id} - Cliente: ${customerInfo.email}`)

    return {
      response: {
        role: 'assistant' as const,
        content: transferMessage
      },
      sessionToken
    }
  }

  // 5. OPTIMIZACI√ìN: Intentar respuesta r√°pida primero (sin OpenAI)
  const quickResponse = getQuickResponse(message, customerInfo, domainId)

  if (quickResponse) {
    console.log('‚úÖ Respuesta r√°pida utilizada (sin OpenAI)')

    // ‚úÖ SIMPLIFICADO: Agregar pregunta de ayuda
    const finalQuickContent = addHelpOffer(quickResponse.content)

    // Agregar respuesta r√°pida a los mensajes
    messagesToSave.push({
      role: 'assistant' as const,
      content: finalQuickContent,
      timestamp: new Date(),
      responseTime: 0, // Respuesta instant√°nea
      respondedWithin2Hours: true // Siempre efectiva
    })

    // ‚úÖ NUEVO: Guardar chat completo
    await saveCompleteChatSession(
      customerInfo.id,
      customerInfo.chatRoom[0].id,
      domainId,
      messagesToSave
    )

    await updateResolutionType(customerInfo.chatRoom[0].id, false)

    return {
      response: {
        role: 'assistant' as const,
        content: finalQuickContent,
        link: quickResponse.link
      },
      sessionToken // Mantener token
    }
  }

  // 5. Generar contexto para OpenAI
  const contextSpecificPrompt = getContextSpecificPrompt(message, domainId, customerInfo.id)

  const customerDataForContext = {
    email: customerInfo.email,
    name: customerInfo.name,
    phone: customerInfo.phone
  }

  const systemPrompt = generateOpenAIContext(
    chatBotDomain,
    customerDataForContext,
    contextSpecificPrompt,
    domainId,
    customerInfo,
    message
  )

  // 6. Usar solo historial relevante (√∫ltimos 10 mensajes)
  const relevantHistory = getRelevantChatHistory(chat, 10)

  // 7. Obtener respuesta de OpenAI
  const chatCompletion = await openai.chat.completions.create({
    messages: [
      { role: 'system', content: systemPrompt },
      ...relevantHistory,
      { role: 'user', content: message }
    ],
    model: 'gpt-3.5-turbo',
    temperature: 0.7,
    max_tokens: 300
  })

  // 8. Manejar respuesta
  const response = chatCompletion.choices[0].message.content

  // ‚úÖ Validar que la respuesta no sea null
  if (!response) {
    throw new Error('OpenAI no retorn√≥ una respuesta v√°lida')
  }

  const result = await handleOpenAIResponse(response, customerInfo, chat)

  // ‚úÖ SIMPLIFICADO: Agregar "¬øHay algo m√°s en que te pueda ayudar?" a todas las respuestas
  const finalContent = addHelpOffer(result.response.content)

  // 9. ‚úÖ NUEVO: Agregar respuesta de OpenAI a los mensajes
  messagesToSave.push({
    role: 'assistant' as const,
    content: finalContent,
    timestamp: new Date(),
    responseTime: Math.floor((Date.now() - messagesToSave[0].timestamp.getTime()) / 1000),
    respondedWithin2Hours: true // Respuesta inmediata
  })

  // 10. ‚úÖ NUEVO: Guardar chat completo con respuesta de OpenAI
  await saveCompleteChatSession(
    customerInfo.id,
    customerInfo.chatRoom[0].id,
    domainId,
    messagesToSave
  )

  // 10. Actualizar tipo de resoluci√≥n
  await updateResolutionType(customerInfo.chatRoom[0].id, false)

  return {
    ...result,
    response: {
      ...result.response,
      content: finalContent
    },
    sessionToken // Mantener token
  }
}

// ============================================
// GESTI√ìN DE CICLO DE VIDA DE CONVERSACIONES
// ============================================

/**
 * Detecta si el usuario ha estado inactivo y debe finalizar la conversaci√≥n
 * Inactividad = 5 minutos sin responder
 */
const checkUserInactivity = async (chatRoomId: string): Promise<boolean> => {
  try {
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: chatRoomId },
      select: {
        lastUserActivityAt: true,
        conversationState: true
      }
    })

    if (!chatRoom) return false

    const now = new Date()
    const lastActivity = new Date(chatRoom.lastUserActivityAt)
    const minutesInactive = (now.getTime() - lastActivity.getTime()) / (1000 * 60)

    // Si lleva m√°s de 5 minutos inactivo y est√° ACTIVE
    if (minutesInactive > 5 && chatRoom.conversationState === 'ACTIVE') {
      return true
    }

    return false
  } catch (error) {
    return false
  }
}

/**
 * Finaliza la conversaci√≥n actual y solicita calificaci√≥n
 */
const endConversation = async (chatRoomId: string, customerId: string): Promise<string | null> => {
  try {
    // Actualizar estado a AWAITING_RATING
    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        conversationState: 'AWAITING_RATING',
        resolved: true,
      }
    })


    return '¬øC√≥mo calificar√≠as la atenci√≥n que recibiste del 1 al 5? (1 = Muy insatisfecho, 5 = Muy satisfecho)'
  } catch (error) {
    return null
  }
}

/**
 * Marca la conversaci√≥n como temporalmente inactiva (NO como ENDED permanente)
 * Esto permite que se reactive cuando el usuario vuelva a escribir
 */
const markConversationAsEnded = async (chatRoomId: string): Promise<void> => {
  try {
    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        conversationState: 'IDLE', // Cambiar a IDLE en lugar de ENDED
        conversationEndedAt: new Date(),
        resolved: true
      }
    })
  } catch (error) {
    console.log('Error al marcar conversaci√≥n como inactiva:', error)
  }
}

/**
 * Inicia una nueva conversaci√≥n (despu√©s de una que termin√≥)
 * Mantiene el mismo cliente pero crea nueva sesi√≥n de chat
 */
const startNewConversation = async (
  customerId: string,
  domainId: string,
  welcomeMessage: string
): Promise<{ chatRoomId: string; welcomeMessage: string }> => {
  try {
    // Obtener el n√∫mero de conversaciones previas
    const previousConversations = await client.chatRoom.count({
      where: {
        customerId,
        conversationState: 'ENDED'
      }
    })

    // Crear nuevo chatRoom para nueva conversaci√≥n
    const newChatRoom = await client.chatRoom.create({
      data: {
        customerId,
        conversationState: 'ACTIVE',
        conversationNumber: previousConversations + 1,
        lastUserActivityAt: new Date(),
      }
    })

    return {
      chatRoomId: newChatRoom.id,
      welcomeMessage: `¬°Hola de nuevo! üëã ${welcomeMessage}`
    }
  } catch (error) {
    console.log('Error al iniciar nueva conversaci√≥n:', error)
    throw error
  }
}

/**
 * Actualiza la √∫ltima actividad del usuario
 */
const updateUserActivity = async (chatRoomId: string): Promise<void> => {
  try {
    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        lastUserActivityAt: new Date()
      }
    })
  } catch (error) {
    console.log('Error al actualizar actividad:', error)
  }
}

/**
 * Verifica el estado de la conversaci√≥n y decide qu√© hacer
 */
const handleConversationState = async (
  chatRoomId: string,
  customerId: string,
  welcomeMessage: string
): Promise<{ shouldStartNew: boolean; newChatRoomId?: string; message?: string }> => {
  try {
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: chatRoomId },
      select: {
        conversationState: true,
        lastUserActivityAt: true,
        satisfactionCollected: true,
      }
    })

    if (!chatRoom) {
      return { shouldStartNew: false }
    }

    // ‚úÖ NUEVA L√ìGICA: Si la conversaci√≥n est√° ENDED, reactivarla (NO crear nueva)
    if (chatRoom.conversationState === 'ENDED') {
      return {
        shouldStartNew: true,
        message: `¬°Hola de nuevo! üëã ${welcomeMessage}`
      }
    }

    // Si est√° IDLE y no ha calificado, solicitar calificaci√≥n
    if (chatRoom.conversationState === 'IDLE' && !chatRoom.satisfactionCollected) {
      const ratingMessage = await endConversation(chatRoomId, customerId)
      return {
        shouldStartNew: false,
        message: ratingMessage || undefined
      }
    }

    return { shouldStartNew: false }
  } catch (error) {
    console.log('Error al manejar estado de conversaci√≥n:', error)
    return { shouldStartNew: false }
  }
}

// ===== FUNCIONES AUXILIARES =====

/**
 * ‚úÖ NUEVA FUNCI√ìN: Guardar chat completo por sesi√≥n de cliente
 * Reemplaza el guardado fragmentado por uno completo y organizado
 */
const saveCompleteChatSession = async (
  customerId: string,
  chatRoomId: string,
  domainId: string,
  newMessages: {
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
    responseTime?: number;
    respondedWithin2Hours?: boolean
  }[]
) => {
  try {
    // 1. Obtener mensajes existentes del chat
    const existingMessages = await client.chatMessage.findMany({
      where: { chatRoomId },
      orderBy: { createdAt: 'asc' },
      select: {
        id: true,
        message: true,
        role: true,
        createdAt: true,
        responseTime: true,
        respondedWithin2Hours: true
      }
    })

    // 2. Combinar mensajes existentes con los nuevos
    const allMessages = [
      ...existingMessages.map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.message,
        timestamp: msg.createdAt,
        responseTime: msg.responseTime,
        respondedWithin2Hours: msg.respondedWithin2Hours
      })),
      ...newMessages
    ]

    // 3. Eliminar mensajes duplicados (por si se guard√≥ parcialmente)
    const uniqueMessages = allMessages.filter((msg, index, self) =>
      index === self.findIndex(m =>
        m.content === msg.content &&
        m.role === msg.role &&
        Math.abs(m.timestamp.getTime() - msg.timestamp.getTime()) < 1000 // 1 segundo de tolerancia
      )
    )

    // 4. Actualizar el chatRoom con el estado completo
    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        updatedAt: new Date(),
        // Marcar como activo si hay mensajes recientes
        live: uniqueMessages.length > 0 ? false : false // No activar autom√°ticamente
      }
    })

    // 5. Guardar mensajes nuevos (evitar duplicados)
    for (const newMsg of newMessages) {
      // Verificar si ya existe
      const exists = await client.chatMessage.findFirst({
        where: {
          chatRoomId,
          message: newMsg.content,
          role: newMsg.role,
          createdAt: {
            gte: new Date(newMsg.timestamp.getTime() - 5000), // 5 segundos de tolerancia
            lte: new Date(newMsg.timestamp.getTime() + 5000)
          }
        }
      })

      if (!exists) {
        await client.chatMessage.create({
          data: {
            chatRoomId,
            message: newMsg.content,
            role: newMsg.role,
            responseTime: newMsg.responseTime,
            respondedWithin2Hours: newMsg.respondedWithin2Hours,
            createdAt: newMsg.timestamp
          }
        })
      }
    }

    return uniqueMessages

  } catch (error) {
    console.error('‚ùå Error al guardar chat completo:', error)
    throw error
  }
}

/**
 * FR1 y FR2: Actualizar o crear m√©tricas de conversaci√≥n
 */
const updateConversationMetrics = async (
  chatRoomId: string,
  responseTime: number,
  respondedWithin2Hours: boolean
) => {
  try {
    // Obtener el domainId del chatRoom
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: chatRoomId },
      select: {
        Customer: {
          select: { domainId: true }
        }
      }
    })

    if (!chatRoom?.Customer?.domainId) return

    const domainId = chatRoom.Customer.domainId

    // Buscar si ya existe un registro de m√©tricas para este chatRoom
    const existingMetrics = await client.conversationMetrics.findFirst({
      where: { chatRoomId }
    })

    if (existingMetrics) {
      // Actualizar m√©tricas existentes
      const newMessagesCount = existingMetrics.messagesCount + 1
      const newTotalResponseTime = existingMetrics.totalResponseTime + responseTime
      const newAverageResponseTime = Math.floor(newTotalResponseTime / newMessagesCount)
      const newMessagesRespondedOnTime = respondedWithin2Hours
        ? existingMetrics.messagesRespondedOnTime + 1
        : existingMetrics.messagesRespondedOnTime
      const newTotalMessagesReceived = existingMetrics.totalMessagesReceived + 1
      const newPercentageOnTime = (newMessagesRespondedOnTime / newTotalMessagesReceived) * 100

      await client.conversationMetrics.update({
        where: { id: existingMetrics.id },
        data: {
          averageResponseTime: newAverageResponseTime,
          totalResponseTime: newTotalResponseTime,
          messagesCount: newMessagesCount,
          messagesRespondedOnTime: newMessagesRespondedOnTime,
          totalMessagesReceived: newTotalMessagesReceived,
          percentageOnTime: newPercentageOnTime,
        }
      })
    } else {
      // Crear nuevo registro de m√©tricas
      const percentageOnTime = respondedWithin2Hours ? 100 : 0

      await client.conversationMetrics.create({
        data: {
          chatRoomId,
          domainId,
          averageResponseTime: responseTime,
          totalResponseTime: responseTime,
          messagesCount: 1,
          messagesRespondedOnTime: respondedWithin2Hours ? 1 : 0,
          totalMessagesReceived: 1,
          percentageOnTime,
        }
      })
    }
  } catch (error) {
    console.log('Error al actualizar m√©tricas de conversaci√≥n:', error)
  }
}

/**
 * FR3: Detectar y marcar el tipo de resoluci√≥n de la conversaci√≥n
 */
const updateResolutionType = async (chatRoomId: string, isNewConversation: boolean) => {
  try {
    // Contar los mensajes del usuario en esta conversaci√≥n
    const userMessagesCount = await client.chatMessage.count({
      where: {
        chatRoomId,
        role: 'user'
      }
    })

    // Verificar si el chat pas√≥ a modo live (escalado a humano)
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: chatRoomId },
      select: { live: true }
    })

    let resolutionType: 'FIRST_INTERACTION' | 'FOLLOW_UP' | 'ESCALATED' | 'UNRESOLVED' = 'UNRESOLVED'
    let resolvedInFirstInteraction: boolean | null = null

    if (chatRoom?.live) {
      // Si est√° en modo live, fue escalado
      resolutionType = 'ESCALATED'
      resolvedInFirstInteraction = false
    } else if (userMessagesCount === 1) {
      // Si solo hay un mensaje del usuario, puede ser resoluci√≥n en primera interacci√≥n
      resolutionType = 'FIRST_INTERACTION'
      resolvedInFirstInteraction = true
    } else if (userMessagesCount > 1) {
      // Si hay m√°s de un mensaje, es seguimiento
      resolutionType = 'FOLLOW_UP'
      resolvedInFirstInteraction = false
    }

    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        resolutionType,
        resolvedInFirstInteraction,
      }
    })
  } catch (error) {
    console.log('Error al actualizar tipo de resoluci√≥n:', error)
  }
}

/**
 * FR2: Detectar si una respuesta fue efectiva (oportuna) - no dio vueltas
 * Una respuesta es efectiva si:
 * 1. Es directa (no pide informaci√≥n redundante)
 * 2. Resuelve en ‚â§2 turnos
 * 3. No hace preguntas cuando ya tiene la informaci√≥n
 */
const isResponseEffective = async (
  chatRoomId: string,
  userMessage: string,
  botResponse: string
): Promise<boolean> => {
  try {
    // Contar turnos de conversaci√≥n (pares user-assistant)
    const messagesCount = await client.chatMessage.count({
      where: { chatRoomId }
    })
    const turnsCount = Math.ceil(messagesCount / 2)

    // Criterio 1: Si es el primer o segundo turno y el bot no pide info redundante ‚Üí Efectivo
    if (turnsCount <= 2) {
      // Verificar que el bot no est√© pidiendo informaci√≥n que ya tiene
      const redundantPatterns = [
        /cu√°l es tu (correo|email|nombre)/i,
        /podr√≠as darme tu (correo|email|nombre)/i,
        /necesito tu (correo|email|nombre)/i,
      ]

      const isRedundant = redundantPatterns.some(pattern => pattern.test(botResponse))

      if (!isRedundant) {
        return true // Respuesta efectiva
      }
    }

    // Criterio 2: Si el usuario pide una acci√≥n espec√≠fica y el bot la ejecuta ‚Üí Efectivo
    const actionRequests = [
      /(?:quiero|deseo|necesito|puedo)\s+(?:agendar|reservar)/i,
      /(?:dame|muestra|ens√©√±ame)\s+(?:productos|servicios|precios)/i,
    ]

    const requestsAction = actionRequests.some(pattern => pattern.test(userMessage))
    const providesLink = /http/.test(botResponse)

    if (requestsAction && providesLink) {
      return true // Respondi√≥ directamente con enlace
    }

    // Criterio 3: Si es m√°s de 3 turnos ‚Üí Probablemente dio vueltas
    if (turnsCount > 3) {
      return false
    }

    // Por defecto, considerar efectivo si cumple condiciones b√°sicas
    return turnsCount <= 2

  } catch (error) {
    console.log('Error al evaluar efectividad de respuesta:', error)
    return false
  }
}

/**
 * ‚úÖ NUEVA FUNCI√ìN: Usa IA para detectar si el usuario quiere terminar la conversaci√≥n
 */
const detectConversationEndingWithAI = async (
  message: string,
  chatHistory: { role: 'user' | 'assistant'; content: string }[]
): Promise<boolean> => {
  try {
    const systemPrompt = `Eres un analizador de conversaciones. Tu trabajo es determinar si el usuario quiere TERMINAR la conversaci√≥n.

ANALIZA el mensaje del usuario y el contexto de la conversaci√≥n para determinar si:
1. El usuario est√° diciendo EXPL√çCITAMENTE que NO necesita m√°s ayuda
2. El usuario se est√° DESPIDIENDO claramente
3. El usuario est√° SATISFECHO y quiere terminar EXPL√çCITAMENTE
4. El usuario est√° AGRADECIENDO y cerrando la conversaci√≥n EXPL√çCITAMENTE

IMPORTANTE: Solo marca como terminaci√≥n si hay se√±ales CLARAS de despedida o satisfacci√≥n. 
Las respuestas a preguntas espec√≠ficas (materiales, productos, etc.) NO son terminaci√≥n.

RESPUESTA SOLO: "SI" si el usuario quiere terminar, "NO" si quiere continuar.

EJEMPLOS DE TERMINACI√ìN:
- "no, gracias" ‚Üí SI  
- "ya est√°, gracias" ‚Üí SI
- "perfecto, eso es todo" ‚Üí SI
- "adi√≥s" ‚Üí SI
- "hasta luego" ‚Üí SI
- "gracias, ya no necesito m√°s" ‚Üí SI
- "eso es todo" ‚Üí SI
- "listo, gracias" ‚Üí SI

EJEMPLOS DE NO TERMINACI√ìN:
- "lino" ‚Üí NO (respuesta a pregunta sobre material)
- "algod√≥n" ‚Üí NO (respuesta a pregunta sobre material)
- "quiero m√°s informaci√≥n" ‚Üí NO
- "tengo otra pregunta" ‚Üí NO
- "necesito ayuda con..." ‚Üí NO
- "s√≠" ‚Üí NO (respuesta afirmativa)
- "no" ‚Üí NO (respuesta negativa a pregunta espec√≠fica)`

    const chatCompletion = await openai.chat.completions.create({
      messages: [
        { role: 'system', content: systemPrompt },
        ...chatHistory.slice(-5), // √öltimos 5 mensajes para contexto
        { role: 'user', content: message }
      ],
      model: 'gpt-3.5-turbo',
      temperature: 0.1, // Baja temperatura para respuestas consistentes
      max_tokens: 10 // Solo necesitamos "SI" o "NO"
    })

    const response = chatCompletion.choices[0].message.content?.trim().toUpperCase()
    return response === 'SI'

  } catch (error) {
    console.log('Error en detectConversationEndingWithAI:', error)
    return false // ‚úÖ Retornar false en caso de error
  }
}

/**
 * ‚úÖ NUEVA FUNCI√ìN: Agrega "¬øHay algo m√°s en que te pueda ayudar?" a las respuestas
 */
const addHelpOffer = (content: string): string => {
  // No agregar si ya tiene la pregunta o si es una solicitud de calificaci√≥n
  if (content.includes('algo m√°s en que') ||
    content.includes('califica') ||
    content.includes('‚≠ê') ||
    content.includes('calificaci√≥n') ||
    content.includes('calificar') ||
    content.includes('estrella') ||
    content.includes('rating') ||
    content.includes('Muchas gracias por tu calificaci√≥n')) {
    return content
  }

  return `${content}\n\n¬øHay algo m√°s en que te pueda ayudar?`
}

/**
 * FR4: Detectar si el cliente est√° calificando la atenci√≥n (1-5)
 */
const detectSatisfactionRating = (message: string): number | null => {
  // Patrones para detectar calificaci√≥n
  const ratingPatterns = [
    /(?:califico|calificar|puntuaci√≥n|nota|rating|estrella).*?([1-5])/i,
    /^([1-5])$/,
    /([1-5])\s*(?:estrella|star)/i,
  ]

  for (const pattern of ratingPatterns) {
    const match = message.match(pattern)
    if (match) {
      const rating = parseInt(match[1])
      if (rating >= 1 && rating <= 5) {
        return rating
      }
    }
  }

  return null
}

/**
 * FR4: Guardar la calificaci√≥n de satisfacci√≥n del cliente
 */
const saveSatisfactionRating = async (
  chatRoomId: string,
  customerId: string,
  domainId: string,
  rating: number,
  comment?: string
) => {
  try {
    // Guardar en CustomerSatisfaction
    await client.customerSatisfaction.create({
      data: {
        chatRoomId,
        customerId,
        domainId,
        rating,
        comment,
      }
    })

    // Actualizar ChatRoom
    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        satisfactionRating: rating,
        satisfactionCollected: true,
        resolved: true,
        conversationEndedAt: new Date(),
      }
    })

  } catch (error) {
    console.log('Error al guardar satisfacci√≥n:', error)
  }
}

/**
 * Extrae informaci√≥n del cliente (email, nombre y tel√©fono) del mensaje
 * OPTIMIZADO: Maneja nombres compuestos correctamente
 */
const extractCustomerData = (message: string): CustomerData => {
  const email = extractEmailsFromString(message)?.[0]

  // Extraer nombre - MEJORADO para nombres compuestos
  let name: string | undefined

  // Patr√≥n 1: Capturar nombres despu√©s de "me llamo", "soy", etc.
  const namePatterns = [
    // "Me llamo Juan P√©rez" - captura hasta coma, punto, o palabras clave
    /(?:me llamo|soy|mi nombre es|ll√°mame)\s+([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+){0,5})(?=\s*[,.]|\s+(?:mi|y|correo|email|cel|tel√©fono|telefono)|$)/i,

    // "Soy Mar√≠a Garc√≠a L√≥pez, mi correo..."
    /(?:me llamo|soy|mi nombre es)\s+([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+){0,5})(?=\s*,)/i,

    // Nombre al inicio del mensaje: "Juan P√©rez, correo..."
    /^([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+){1,5})(?=\s*[,.]|\s+(?:mi|correo|email))/i
  ]

  for (const pattern of namePatterns) {
    const match = message.match(pattern)
    if (match) {
      name = match[1].trim()

      // Validar que sea un nombre v√°lido (no una palabra clave)
      const invalidNames = ['correo', 'email', 'celular', 'telefono', 'tel√©fono', 'cita', 'hola']
      if (!invalidNames.some(invalid => name?.toLowerCase().includes(invalid))) {
        // Limpiar y validar
        name = name.replace(/[^\w\s√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]/g, '').trim()

        // Debe tener al menos 2 caracteres y m√°ximo 60
        if (name.length >= 2 && name.length <= 60) {
          break // Nombre v√°lido encontrado
        }
      }
      name = undefined // Resetear si no es v√°lido
    }
  }

  // Fallback: Si no se encontr√≥ con patrones, buscar nombre entre comillas
  if (!name) {
    const quotedName = message.match(/["']([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±\s]+)["']/i)
    if (quotedName && quotedName[1].length >= 2 && quotedName[1].length <= 60) {
      name = quotedName[1].trim()
    }
  }

  // Extraer tel√©fono/celular (patrones peruanos)
  let phone: string | undefined
  // Buscar espec√≠ficamente despu√©s de palabras clave de tel√©fono
  const phoneKeywordsPattern = /(?:celular|tel√©fono|tel√©fono|phone|m√≥vil)\s*(?:es\s*)?(?:es\s*)?(?:\+?51\s?)?(9\d{8})/i
  const phoneKeywordsMatch = message.match(phoneKeywordsPattern)

  if (phoneKeywordsMatch) {
    phone = phoneKeywordsMatch[1]
  } else {
    // Patr√≥n general para n√∫meros de celular peruanos
    const phonePattern = /(?:\+?51\s?)?(9\d{8})/g
    const phoneMatch = message.match(phonePattern)
    if (phoneMatch) {
      phone = phoneMatch[0].replace(/\s/g, '').replace(/\+51/, '')
    }
  }

  return { email, name, phone }
}

/**
 * Busca o crea un cliente en la base de datos
 * CORREGIDO: Retorna estructura correcta
 */
const findOrCreateCustomer = async (domainId: string, customerData: CustomerData, filterQuestions: any[]) => {
  const existingCustomer = await client.domain.findUnique({
    where: { id: domainId },
    select: {
      User: { select: { clerkId: true } },
      name: true,
      customer: {
        where: { email: { startsWith: customerData.email } },
        select: {
          id: true,
          email: true,
          name: true,
          phone: true,
          questions: true,
          chatRoom: {
            select: {
              id: true,
              live: true,
              mailed: true,
              satisfactionCollected: true,
              conversationState: true,
              lastUserActivityAt: true,
              conversationNumber: true
            }
          }
        }
      }
    }
  })

  if (!existingCustomer?.customer.length) {
    // Crear nuevo cliente
    await client.domain.update({
      where: { id: domainId },
      data: {
        customer: {
          create: {
            email: customerData.email,
            name: customerData.name,
            phone: customerData.phone,
            status: true,
            totalInteractions: 1,
            lastActiveAt: new Date(),
            questions: { create: filterQuestions },
            chatRoom: { create: {} }
          }
        }
      }
    })

    // ‚úÖ CORREGIDO: Buscar el cliente reci√©n creado con la estructura correcta
    const createdCustomer = await client.domain.findUnique({
      where: { id: domainId },
      select: {
        User: { select: { clerkId: true } },
        name: true,
        customer: {
          where: { email: { startsWith: customerData.email } },
          select: {
            id: true,
            email: true,
            name: true,
            phone: true,
            questions: true,
            chatRoom: {
              select: {
                id: true,
                live: true,
                mailed: true,
                satisfactionCollected: true,
                conversationState: true,
                lastUserActivityAt: true,
                conversationNumber: true
              }
            }
          }
        }
      }
    })

    return { customer: createdCustomer, isNew: true }
  }

  return { customer: existingCustomer, isNew: false }
}

/**
 * Actualiza los datos del cliente existente si se detecta informaci√≥n nueva
 */
const updateCustomerData = async (customerId: string, customerData: CustomerData) => {
  const updateData: any = {
    lastActiveAt: new Date(),
    totalInteractions: { increment: 1 }
  }

  // Solo actualizar si hay datos nuevos
  if (customerData.name) updateData.name = customerData.name
  if (customerData.phone) updateData.phone = customerData.phone

  await client.customer.update({
    where: { id: customerId },
    data: updateData
  })
}

// ============================================
// SISTEMA INTELIGENTE DE PRODUCTOS
// ============================================

/**
 * Detecta las preferencias del cliente en su mensaje
 * Busca menciones de materiales, categor√≠as, texturas, temporadas, usos y caracter√≠sticas
 */
const detectProductPreferences = (
  message: string,
  chatBotDomain: ChatBotDomain
): {
  materials: string[]
  categories: string[]
  textures: string[]
  seasons: string[]
  uses: string[]
  features: string[]
  colors: string[]
  hasPreferences: boolean
} => {
  const lowerMsg = message.toLowerCase()

  const preferences = {
    materials: [] as string[],
    categories: [] as string[],
    textures: [] as string[],
    seasons: [] as string[],
    uses: [] as string[],
    features: [] as string[],
    colors: [] as string[],
    hasPreferences: false
  }

  // Detectar materiales mencionados
  chatBotDomain.materials.forEach(mat => {
    if (lowerMsg.includes(mat.name.toLowerCase())) {
      preferences.materials.push(mat.name)
      preferences.hasPreferences = true
    }
  })

  // Detectar categor√≠as mencionadas
  chatBotDomain.categories.forEach(cat => {
    if (lowerMsg.includes(cat.name.toLowerCase())) {
      preferences.categories.push(cat.name)
      preferences.hasPreferences = true
    }
  })

  // Detectar texturas mencionadas
  chatBotDomain.textures.forEach(tex => {
    if (lowerMsg.includes(tex.name.toLowerCase())) {
      preferences.textures.push(tex.name)
      preferences.hasPreferences = true
    }
  })

  // Detectar temporadas mencionadas
  chatBotDomain.seasons.forEach(season => {
    if (lowerMsg.includes(season.name.toLowerCase())) {
      preferences.seasons.push(season.name)
      preferences.hasPreferences = true
    }
  })

  // Detectar usos mencionados
  chatBotDomain.uses.forEach(use => {
    if (lowerMsg.includes(use.name.toLowerCase())) {
      preferences.uses.push(use.name)
      preferences.hasPreferences = true
    }
  })

  // Detectar caracter√≠sticas mencionadas
  chatBotDomain.features.forEach(feat => {
    if (lowerMsg.includes(feat.name.toLowerCase())) {
      preferences.features.push(feat.name)
      preferences.hasPreferences = true
    }
  })

  // Detectar colores comunes mencionados
  const commonColors = [
    'rojo', 'azul', 'verde', 'amarillo', 'negro', 'blanco', 'gris', 'rosa',
    'morado', 'naranja', 'marr√≥n', 'beige', 'celeste', 'turquesa', 'violeta'
  ]

  commonColors.forEach(color => {
    if (lowerMsg.includes(color)) {
      preferences.colors.push(color)
      preferences.hasPreferences = true
    }
  })

  return preferences
}

/**
 * Filtra productos seg√∫n las preferencias detectadas
 */
const filterProductsByPreferences = (
  products: ChatBotDomain['products'],
  preferences: ReturnType<typeof detectProductPreferences>
): ChatBotDomain['products'] => {
  if (!preferences.hasPreferences) {
    return products // Si no hay preferencias, devolver todos
  }

  return products.filter(product => {
    let matches = false

    // Filtrar por material
    if (preferences.materials.length > 0 && product.material) {
      if (preferences.materials.some(mat =>
        product.material?.name.toLowerCase().includes(mat.toLowerCase())
      )) {
        matches = true
      }
    }

    // Filtrar por categor√≠a
    if (preferences.categories.length > 0 && product.category) {
      if (preferences.categories.some(cat =>
        product.category?.name.toLowerCase().includes(cat.toLowerCase())
      )) {
        matches = true
      }
    }

    // Filtrar por textura
    if (preferences.textures.length > 0 && product.texture) {
      if (preferences.textures.some(tex =>
        product.texture?.name.toLowerCase().includes(tex.toLowerCase())
      )) {
        matches = true
      }
    }

    // Filtrar por temporada
    if (preferences.seasons.length > 0 && product.season) {
      if (preferences.seasons.some(season =>
        product.season?.name.toLowerCase().includes(season.toLowerCase())
      )) {
        matches = true
      }
    }

    // Filtrar por uso
    if (preferences.uses.length > 0 && product.uses.length > 0) {
      if (preferences.uses.some(use =>
        product.uses.some(pUse =>
          pUse.use.name.toLowerCase().includes(use.toLowerCase())
        )
      )) {
        matches = true
      }
    }

    // Filtrar por caracter√≠sticas
    if (preferences.features.length > 0 && product.features.length > 0) {
      if (preferences.features.some(feat =>
        product.features.some(pFeat =>
          pFeat.feature.name.toLowerCase().includes(feat.toLowerCase())
        )
      )) {
        matches = true
      }
    }

    // Filtrar por color
    if (preferences.colors.length > 0 && product.color) {
      if (preferences.colors.some(color =>
        product.color?.toLowerCase().includes(color.toLowerCase())
      )) {
        matches = true
      }
    }

    return matches
  })
}

/**
 * Genera contexto inteligente de productos:
 * - Si el cliente menciona preferencias espec√≠ficas, filtra y muestra solo productos relevantes
 * - Si no hay preferencias, sugiere hacer preguntas antes de mostrar todos los productos
 */
const generateProductsContext = (
  chatBotDomain: ChatBotDomain,
  message: string
): string => {
  if (chatBotDomain.products.length === 0) {
    return '\n‚ö†Ô∏è NO hay productos disponibles en este momento.'
  }

  // Detectar si el cliente pregunta por productos
  const lowerMsg = message.toLowerCase()
  const asksForProducts = /\b(productos?|telas?|textiles?|cat√°logo|que\s+tienen|que\s+venden|muestrame|mu√©strame|ver\s+productos)\b/i.test(lowerMsg)

  // Detectar preferencias en el mensaje
  const preferences = detectProductPreferences(message, chatBotDomain)

  // Si hay preferencias detectadas, filtrar productos
  if (preferences.hasPreferences) {
    const filteredProducts = filterProductsByPreferences(chatBotDomain.products, preferences)

    if (filteredProducts.length === 0) {
      return `\n‚ùå No encontramos productos que coincidan exactamente con: ${[...preferences.materials, ...preferences.categories, ...preferences.textures,
      ...preferences.seasons, ...preferences.uses, ...preferences.features,
      ...preferences.colors].join(', ')
        }. Tenemos ${chatBotDomain.products.length} productos disponibles en total.`
    }

    // Mostrar productos filtrados con informaci√≥n detallada
    const productDetails = filteredProducts.slice(0, 5).map(p => {
      const details: string[] = [`${p.name} - S/${p.salePrice || p.price}`]

      if (p.material) details.push(`Material: ${p.material.name}`)
      if (p.texture) details.push(`Textura: ${p.texture.name}`)
      if (p.category) details.push(`Categor√≠a: ${p.category.name}`)
      if (p.color) details.push(`Color: ${p.color}`)
      if (p.width) details.push(`Ancho: ${p.width}`)
      if (p.weight) details.push(`Gramaje: ${p.weight}`)
      if (p.description) details.push(`${p.description}`)

      const uses = p.uses.map(u => u.use.name).join(', ')
      if (uses) details.push(`Usos: ${uses}`)

      const features = p.features.map(f => f.feature.name).join(', ')
      if (features) details.push(`Caracter√≠sticas: ${features}`)

      return details.join(' | ')
    }).join('\n')

    return `\n‚úÖ Productos que coinciden con tu b√∫squeda (${filteredProducts.length} encontrados):\n${productDetails}${filteredProducts.length > 5 ? `\n... y ${filteredProducts.length - 5} productos m√°s` : ''
      }`
  }

  // Si pregunta por productos pero no da preferencias, sugerir hacer preguntas
  if (asksForProducts) {
    const suggestions: string[] = []

    if (chatBotDomain.materials.length > 0) {
      suggestions.push(`Materiales disponibles: ${chatBotDomain.materials.map(m => m.name).join(', ')}`)
    }
    if (chatBotDomain.categories.length > 0) {
      suggestions.push(`Categor√≠as: ${chatBotDomain.categories.map(c => c.name).join(', ')}`)
    }
    if (chatBotDomain.textures.length > 0) {
      suggestions.push(`Texturas: ${chatBotDomain.textures.map(t => t.name).join(', ')}`)
    }
    if (chatBotDomain.uses.length > 0) {
      suggestions.push(`Usos: ${chatBotDomain.uses.map(u => u.name).join(', ')}`)
    }

    return `\nüìã Tenemos ${chatBotDomain.products.length} productos textiles disponibles.

IMPORTANTE: Para ayudarte mejor, pregunta al cliente sobre sus preferencias:
${suggestions.length > 0 ? suggestions.join('\n') : ''}

Ejemplo: "¬øQu√© tipo de material/tela est√°s buscando?" o "¬øPara qu√© uso necesitas la tela?"`
  }

  // Si no pregunta por productos, solo dar contexto b√°sico
  return `\nüì¶ Tenemos ${chatBotDomain.products.length} productos textiles. Pregunta al cliente qu√© busca antes de listarlos todos.`
}

/**
 * OPTIMIZACI√ìN: Prompt compacto para reducir tokens
 * Reducci√≥n de ~800 tokens a ~300 tokens (62% ahorro)
 */
const generateOpenAIContext = (
  chatBotDomain: ChatBotDomain,
  customerData: CustomerData,
  contextSpecificPrompt: string,
  domainId: string,
  customerInfo: any,
  message: string
): string => {
  // Contextos compactos
  const helpdeskContext = chatBotDomain.helpdesk.length > 0
    ? `\nFAQs: ${chatBotDomain.helpdesk.map(h => h.question).join(', ')}`
    : ''

  // ‚úÖ NUEVO: Usar sistema inteligente de productos
  const productsContext = generateProductsContext(chatBotDomain, message)

  return `Eres Lunari AI, asistente virtual especializado en textiles para ${chatBotDomain.name}.

CLIENTE: ${customerData.name || 'Usuario'} | ${customerData.email} | ${customerData.phone || 'Sin tel√©fono'}

‚ö†Ô∏è REGLAS CR√çTICAS - PROHIBIDO INVENTAR INFORMACI√ìN:
1. SOLO usa los productos y datos proporcionados arriba en el contexto
2. NUNCA inventes productos, materiales, caracter√≠sticas o servicios que no est√°n en el contexto
3. Si no tienes la informaci√≥n exacta, di "No tengo esa informaci√≥n espec√≠fica"
4. NO pidas datos del cliente que ya aparecen arriba (nombre, email, tel√©fono)
5. Si dice "agendar/reservar/cita" ‚Üí Da SOLO este enlace: http://localhost:3000/portal/${domainId}/appointment/${customerInfo?.id}
6. NO preguntes fecha/hora para citas, solo da el enlace
7. Si la consulta es fuera de contexto textil, no puedes ayudar, o el cliente solicita hablar con un humano ‚Üí Responde con "(realtime)" para escalar a humano
   Palabras clave para escalaci√≥n: "humano", "persona", "agente", "operador", "hablar con alguien", "no me ayuda", "quiero hablar con", "escalar"
${helpdeskContext}${productsContext}
9. NO preguntes "¬øHay algo m√°s en que pueda ayudarte?" - esto se agrega autom√°ticamente

üéØ ESTRATEGIA PARA RECOMENDAR PRODUCTOS:
- Si el cliente pregunta por productos SIN especificar qu√© busca, NO le des una lista completa
- En su lugar, haz preguntas inteligentes para conocer sus necesidades:
  * "¬øQu√© tipo de material o tela est√°s buscando?" (si hay materiales disponibles en el contexto)
  * "¬øPara qu√© uso necesitas la tela?" (si hay usos disponibles en el contexto)
  * "¬øQu√© textura prefieres?" (si hay texturas disponibles en el contexto)
  * "¬øQu√© categor√≠a te interesa?" (si hay categor√≠as disponibles en el contexto)
- Una vez que el cliente mencione sus preferencias (material, uso, categor√≠a, color, etc.), muestra SOLO los productos del contexto que coincidan
- Si el cliente menciona algo que NO est√° en tu contexto de productos, ind√≠cale qu√© opciones S√ç tienes disponibles

Responde en espa√±ol, breve, amigable y directo. Usa el nombre del cliente. S√© √∫til pero NUNCA inventes informaci√≥n.`
}

/**
 * Verifica si el mensaje es una solicitud de agendamiento de cita
 */
const isAppointmentRequest = (message: string): boolean => {
  const appointmentKeywords = ['reservar cita', 'agendar cita', 'generar cita', 'quiero cita', 'necesito cita', 'cita']
  return appointmentKeywords.some(keyword =>
    message.toLowerCase().includes(keyword.toLowerCase())
  )
}

/**
 * Determina el contexto espec√≠fico basado en el tipo de solicitud
 */
const getContextSpecificPrompt = (message: string, domainId: string, customerId: string): string => {
  const isAppointmentRequest = /cita|agendar|consulta|reuni√≥n|visita/i.test(message)
  const isGeneralQuery = /ayuda|informaci√≥n|consulta|pregunta/i.test(message)

  if (isAppointmentRequest) {
    return `
CONTEXTO ACTUAL: El cliente est√° solicitando agendar una cita o consulta.
RESPUESTA ESPERADA: Debes ayudarlo con el proceso de agendamiento y proporcionar el enlace de citas: http://localhost:3000/portal/${domainId}/appointment/${customerId}
NO pidas email nuevamente, ya lo tienes.`
  } else if (isGeneralQuery) {
    return `
CONTEXTO ACTUAL: El cliente est√° haciendo una consulta general.
RESPUESTA ESPERADA: Responde su consulta de manera √∫til y ofrece ayuda adicional.
NO pidas email nuevamente, ya lo tienes.`
  }

  return ''
}

/**
 * Maneja la respuesta de OpenAI y ejecuta acciones espec√≠ficas
 */
const handleOpenAIResponse = async (
  response: string,
  customerInfo: CustomerInfo,
  chatHistory: any[]
) => {
  // ‚úÖ Manejar modo tiempo real (escalado a humano)
  if (response.includes('(realtime)')) {
    await client.chatRoom.update({
      where: { id: customerInfo.chatRoom[0].id },
      data: {
        live: true,
        conversationState: 'ESCALATED' as any // ‚úÖ Marcar como escalado as any // ‚úÖ Marcar como escalado
      }
    })

    // ‚úÖ Notificar al equipo humano sobre la escalaci√≥n
    console.log(`üö® ESCALACI√ìN A HUMANO: Chat ${customerInfo.chatRoom[0].id} - Cliente: ${customerInfo.email}`)

    return {
      response: {
        role: 'assistant' as const,
        content: response.replace('(realtime)', '')
      },
      live: true, // ‚úÖ Indicar que est√° en modo live
      chatRoom: customerInfo.chatRoom[0].id // ‚úÖ ID del chatRoom para Pusher
    }
  }

  // Manejar preguntas completadas
  if (chatHistory[chatHistory.length - 1]?.content.includes('(complete)')) {
    const firstUnansweredQuestion = await client.customerResponses.findFirst({
      where: {
        customerId: customerInfo.id,
        answered: null
      },
      select: { id: true },
      orderBy: { question: 'asc' }
    })

    if (firstUnansweredQuestion) {
      await client.customerResponses.update({
        where: { id: firstUnansweredQuestion.id },
        data: { answered: chatHistory[chatHistory.length - 1].content }
      })
    }
  }

  // Manejar enlaces generados - CORREGIDO: Mantener contenido original
  const generatedLink = extractURLfromString(response)
  if (generatedLink) {
    const cleanLink = generatedLink[0].replace(/[()]+$/, '').trim()
    return {
      response: {
        role: 'assistant' as const,
        content: response, // ‚úÖ CORREGIDO: Mantener el contenido completo original
        link: cleanLink
      }
    }
  }

  // Respuesta normal
  return {
    response: {
      role: 'assistant' as const,
      content: response
    }
  }
}

/**
 * Maneja el flujo cuando no hay email del cliente
 */
const handleNoEmailFlow = async (message: string, chatHistory: any[]) => {
  // Extraer datos disponibles del mensaje actual
  const extractedData = extractCustomerData(message)

  // Determinar qu√© informaci√≥n ya tenemos
  const hasName = !!extractedData.name
  const hasEmail = !!extractedData.email
  const hasPhone = !!extractedData.phone

  // Crear prompt din√°mico basado en lo que ya sabemos
  let systemPrompt = `Eres **Lunari AI**, un asistente virtual profesional y amigable. Tu objetivo es obtener la informaci√≥n necesaria del cliente de manera natural y conversacional.

## INFORMACI√ìN ACTUAL DEL CLIENTE:
${hasName ? `- Nombre: ${extractedData.name}` : '- Nombre: No disponible'}
${hasEmail ? `- Email: ${extractedData.email}` : '- Email: No disponible'}
${hasPhone ? `- Tel√©fono: ${extractedData.phone}` : '- Tel√©fono: No disponible'}

## INSTRUCCIONES CR√çTICAS PARA EL FORMATO:
- Da una bienvenida c√°lida y profesional: "¬°Hola! Soy Lunari AI, tu asistente virtual."
- SIEMPRE da un salto de l√≠nea despu√©s del saludo
- Luego escribe: "Para brindarte la mejor atenci√≥n, necesito algunos datos:"
- SIEMPRE da otro salto de l√≠nea despu√©s de esta frase
- Enumera SOLO los datos que faltan, numerados del 1 al 3 m√°ximo
- CADA PREGUNTA debe estar en una l√≠nea separada
- Los √∫nicos datos a pedir son: nombre, correo electr√≥nico, n√∫mero de celular
- Si ya tienes el nombre, √∫salo en la conversaci√≥n
- Mant√©n un tono amigable y profesional
- No pidas otros datos, solo estos 3 espec√≠ficos

## FORMATO OBLIGATORIO:
Debes responder EXACTAMENTE en este formato:

         ${TEXTILE_MESSAGES.WELCOME}

         Para brindarte la mejor atenci√≥n especializada en textiles, necesito algunos datos:

         1. ¬øC√≥mo te llamas?
         2. ¬øCu√°l es tu correo electr√≥nico?
         3. ¬øTu n√∫mero de celular?

         Cada n√∫mero debe estar en una l√≠nea separada. NO pongas todo en una sola l√≠nea.

## FLUJO DE INFORMACI√ìN:
1. **Si no tienes nombre**: Pide el nombre primero
2. **Si no tienes email**: Solicita el email explicando que es para brindar mejor servicio
3. **Si no tienes tel√©fono**: Puedes solicitar el tel√©fono para contacto adicional (opcional)

## EJEMPLOS DE RESPUESTAS:

### Si no tienes nada:
"¬°Hola! Soy Lunari AI, tu asistente virtual.

Para brindarte la mejor atenci√≥n, necesito algunos datos:

1. ¬øC√≥mo te llamas?
2. ¬øCu√°l es tu correo electr√≥nico?  
3. ¬øTu n√∫mero de celular?"

### Si ya tienes nombre pero no email:
"¬°Hola ${extractedData.name}! Soy Lunari AI.

Para brindarte la mejor atenci√≥n, necesito algunos datos:

1. ¬øCu√°l es tu correo electr√≥nico?
2. ¬øTu n√∫mero de celular?"

### Si ya tienes nombre y email pero no tel√©fono:
"¬°Perfecto ${extractedData.name}! Ya tengo tu email (${extractedData.email}).

Para completar tu perfil, necesito:

1. ¬øTu n√∫mero de celular?"

## TONO:
- Amigable pero profesional
- Emp√°tico con las necesidades del usuario
- Claro en las instrucciones
- Personalizado usando la informaci√≥n disponible

RECUERDA: S√© natural, amigable y profesional. Solo pide la informaci√≥n que realmente necesitas.

         IMPORTANTE: Cuando pidas los datos, usa EXACTAMENTE este formato con saltos de l√≠nea:
         ${TEXTILE_MESSAGES.WELCOME}

         Para brindarte la mejor atenci√≥n especializada en textiles, necesito algunos datos:

         1. ¬øC√≥mo te llamas?
         2. ¬øCu√°l es tu correo electr√≥nico?
         3. ¬øTu n√∫mero de celular?

         NO pongas todo en una sola l√≠nea. Cada pregunta debe estar en su propia l√≠nea.`

  const chatCompletion = await openai.chat.completions.create({
    messages: [
      { role: 'system', content: systemPrompt },
      ...chatHistory,
      { role: 'user', content: message }
    ],
    model: 'gpt-3.5-turbo',
    temperature: 0.7,
    max_tokens: 300
  })

  return {
    response: {
      role: 'assistant' as const,
      content: chatCompletion.choices[0].message.content
    }
  }
}

// ===== FUNCI√ìN PRINCIPAL REFACTORIZADA =====
export const onAiChatBotAssistant = async (
  id: string,
  chat: { role: 'user' | 'assistant'; content: string }[],
  author: 'user',
  message: string,
  sessionToken?: string
) => {
  try {
    const chatBotDomain = await client.domain.findUnique({
      where: { id },
      select: {
        name: true,
        helpdesk: { select: { question: true, answer: true } },
        products: {
          where: { active: true }, // Solo productos activos
          select: {
            name: true,
            price: true,
            image: true,
            salePrice: true,
            description: true,
            color: true,
            width: true,
            weight: true,
            stock: true,
            material: { select: { name: true } },
            texture: { select: { name: true } },
            category: { select: { name: true } },
            season: { select: { name: true } },
            uses: {
              select: {
                use: { select: { name: true } }
              }
            },
            features: {
              select: {
                feature: { select: { name: true } }
              }
            }
          }
        },
        filterQuestions: {
          where: { answered: null },
          select: { question: true }
        },
        // Obtener cat√°logos disponibles para hacer preguntas inteligentes
        categories: {
          where: { active: true },
          select: { name: true }
        },
        materials: {
          where: { active: true },
          select: { name: true }
        },
        textures: {
          where: { active: true },
          select: { name: true }
        },
        seasons: {
          where: { active: true },
          select: { name: true }
        },
        uses: {
          where: { active: true },
          select: { name: true }
        },
        features: {
          where: { active: true },
          select: { name: true }
        }
      }
    })

    if (!chatBotDomain) {
      throw new Error('Chatbot domain not found')
    }

    // ‚úÖ NUEVA L√ìGICA: Usar IA para detectar si el usuario quiere terminar
    const shouldEndConversation = await detectConversationEndingWithAI(message, chat)

    if (sessionToken) {
      const customerFromToken = await getCustomerFromToken(sessionToken, id)

      if (customerFromToken && customerFromToken.chatRoom && customerFromToken.chatRoom.length > 0) {
        const customerInfo = {
          ...customerFromToken,
          chatRoom: customerFromToken.chatRoom
        }

        return await handleAuthenticatedUser(
          customerInfo,
          message,
          author,
          chat,
          id, // ‚úÖ Pasar el domainId
          chatBotDomain,
          sessionToken
        )
      }
    }

    let existingEmail: string | null = null
    for (const msg of chat) {
      const emailInHistory = extractEmailsFromString(msg.content)?.[0]
      if (emailInHistory) {
        existingEmail = emailInHistory
        break
      }
    }

    const customerDataFromCurrentMessage = extractCustomerData(message)
    const emailFromCurrentMessage = customerDataFromCurrentMessage.email
    const finalEmail = emailFromCurrentMessage || existingEmail

    if (finalEmail) {
      const existingCustomer = await client.domain.findUnique({
        where: { id },
        select: {
          name: true,
          customer: {
            where: {
              email: {
                contains: finalEmail,
                mode: 'insensitive'
              }
            },
            select: {
              id: true,
              email: true,
              name: true,
              phone: true,
              questions: true,
              chatRoom: {
                select: {
                  id: true,
                  live: true,
                  mailed: true,
                  satisfactionCollected: true
                }
              }
            }
          }
        }
      })

      let customerInfo: any = null
      let isNewCustomer = false

      if (existingCustomer?.customer && existingCustomer.customer.length > 0) {
        customerInfo = existingCustomer.customer[0]
        isNewCustomer = false

        const onlyProvidedEmail = finalEmail && !customerDataFromCurrentMessage.name && !customerDataFromCurrentMessage.phone

        if (onlyProvidedEmail) {
          const sessionData = await generateSessionToken(
            customerInfo.id,
            customerInfo.email || finalEmail,
            id,
            customerInfo.chatRoom[0].id
          )

          await onStoreConversations(customerInfo.chatRoom[0].id, message, 'user')

          // ‚úÖ ENVIAR MENSAJE DEL USUARIO INMEDIATAMENTE (ANTES DEL PROCESAMIENTO)
          if (customerInfo.chatRoom[0].live) {
            await onRealTimeChat(
              customerInfo.chatRoom[0].id,
              message,
              `user-${Date.now()}`,
              'user'
            )
          }

          const welcomeBackMessage = customerInfo.name
            ? `¬°Hola de nuevo ${customerInfo.name}! üòä Me alegra verte otra vez. ¬øEn qu√© puedo ayudarte hoy?`
            : `¬°Hola de nuevo! üòä Reconozco tu correo ${customerInfo.email}. ¬øEn qu√© puedo ayudarte?`

          await onStoreConversations(customerInfo.chatRoom[0].id, welcomeBackMessage, 'assistant', message)

          return {
            response: {
              role: 'assistant',
              content: welcomeBackMessage
            },
            sessionToken: sessionData.token,
            sessionData: {
              customerId: customerInfo.id,
              email: customerInfo.email,
              name: customerInfo.name,
              expiresAt: sessionData.expiresAt
            }
          }
        }

        if (customerDataFromCurrentMessage.name || customerDataFromCurrentMessage.phone) {
          await updateCustomerData(customerInfo.id, customerDataFromCurrentMessage)
        }
      } else {
        const fullCustomerData = {
          email: finalEmail,
          name: customerDataFromCurrentMessage.name,
          phone: customerDataFromCurrentMessage.phone
        }

        const newCustomerResult = await findOrCreateCustomer(
          id,
          fullCustomerData,
          chatBotDomain.filterQuestions
        )

        const customerResultData = newCustomerResult.customer as any
        customerInfo = customerResultData.customer[0]
        isNewCustomer = true

        const sessionData = await generateSessionToken(
          customerInfo.id,
          customerInfo.email,
          id,
          customerInfo.chatRoom[0].id
        )

        return {
          response: {
            role: 'assistant',
            content: `¬°Bienvenido ${fullCustomerData.name || 'a Lunari AI'}! ${TEXTILE_MESSAGES.WELCOME} ${TEXTILE_MESSAGES.SERVICES_DESCRIPTION} ¬øEn qu√© puedo ayudarte hoy?`
          },
          sessionToken: sessionData.token,
          sessionData: {
            customerId: customerInfo.id,
            email: customerInfo.email,
            name: customerInfo.name,
            expiresAt: sessionData.expiresAt
          }
        }
      }

      if (!sessionToken && customerInfo) {
        await generateSessionToken(
          customerInfo.id,
          customerInfo.email || finalEmail,
          id,
          customerInfo.chatRoom[0].id
        )
      }

      // ‚úÖ PRIORIDAD: Detectar si el usuario quiere terminar usando IA
      if (customerInfo && customerInfo.chatRoom && customerInfo.chatRoom[0]) {
        if (shouldEndConversation) {
          await onStoreConversations(customerInfo.chatRoom[0].id, message, author)

          const ratingMessage = `¬°Perfecto! Me alegra haberte ayudado. üòä

                                  Antes de que te vayas, ¬øpodr√≠as calificar tu experiencia del 1 al 5?

                                  ‚≠ê 1 = Muy insatisfecho
                                  ‚≠ê 5 = Muy satisfecho

                                  Tu opini√≥n nos ayuda a mejorar.`

          await onStoreConversations(customerInfo.chatRoom[0].id, ratingMessage, 'assistant', message)

          await client.chatRoom.update({
            where: { id: customerInfo.chatRoom[0].id },
            data: {
              conversationState: 'AWAITING_RATING',
              resolved: true
            }
          })

          return {
            response: {
              role: 'assistant',
              content: ratingMessage
            }
          }
        }
      }

      const isAppointment = isAppointmentRequest(message)
      if (isAppointment) {
        await onStoreConversations(customerInfo.chatRoom[0].id, message, author)
        await onStoreConversations(
          customerInfo.chatRoom[0].id,
          `¬°Perfecto! Aqu√≠ tienes el enlace para agendar tu cita: http://localhost:3000/portal/${id}/appointment/${customerInfo.id}`,
          'assistant',
          message
        )

        await updateResolutionType(customerInfo.chatRoom[0].id, false)

        return {
          response: {
            role: 'assistant',
            content: `¬°Perfecto! Aqu√≠ tienes el enlace para agendar tu cita:`,
            link: `http://localhost:3000/portal/${id}/appointment/${customerInfo.id}`
          }
        }
      }

      const satisfactionRating = detectSatisfactionRating(message)
      if (satisfactionRating) {
        await saveSatisfactionRating(
          customerInfo.chatRoom[0].id,
          customerInfo.id,
          id,
          satisfactionRating,
          message
        )

        return {
          response: {
            role: 'assistant',
            content: `¬°Muchas gracias por tu calificaci√≥n de ${satisfactionRating}/5! Tu opini√≥n es muy importante para nosotros y nos ayuda a mejorar nuestro servicio. üòä

¬øTienes alguna otra consulta o necesitas ayuda con algo m√°s?`
          }
        }
      }

      if (customerInfo.chatRoom[0].live) {
        await onStoreConversations(customerInfo.chatRoom[0].id, message, author)

        // ‚úÖ ENVIAR MENSAJE DEL USUARIO INMEDIATAMENTE (ANTES DEL PROCESAMIENTO)
        await onRealTimeChat(
          customerInfo.chatRoom[0].id,
          message,
          `user-${Date.now()}`, // ID temporal para el mensaje del usuario
          'user'
        )

        if (!customerInfo.chatRoom[0].mailed) {
          const domainOwner = await client.domain.findUnique({
            where: { id },
            select: {
              User: {
                select: {
                  clerkId: true
                }
              }
            }
          })

          if (domainOwner?.User?.clerkId) {
            const user = await clerkClient.users.getUser(domainOwner.User.clerkId)
            await onMailer(
              user.emailAddresses[0].emailAddress,
              customerInfo.name || 'Cliente',
              customerInfo.email
            )

            await client.chatRoom.update({
              where: { id: customerInfo.chatRoom[0].id },
              data: { mailed: true }
            })
          }
        }

        return {
          live: true,
          chatRoom: customerInfo.chatRoom[0].id
        }
      }

      await onStoreConversations(customerInfo.chatRoom[0].id, message, author)

      const quickResponse = getQuickResponse(message, customerInfo, id)
      if (quickResponse) {
        const finalQuickContentMain = addHelpOffer(quickResponse.content)

        await onStoreConversations(
          customerInfo.chatRoom[0].id,
          finalQuickContentMain,
          'assistant',
          message
        )

        await updateResolutionType(customerInfo.chatRoom[0].id, false)

        return {
          response: {
            role: 'assistant' as const,
            content: finalQuickContentMain,
            link: quickResponse.link
          }
        }
      }

      const contextSpecificPrompt = getContextSpecificPrompt(message, id, customerInfo.id)
      const customerDataForContext = {
        email: customerInfo.email,
        name: customerInfo.name,
        phone: customerInfo.phone
      }

      const systemPrompt = generateOpenAIContext(
        chatBotDomain,
        customerDataForContext,
        contextSpecificPrompt,
        id,
        customerInfo,
        message
      )

      const relevantHistory = getRelevantChatHistory(chat, 10)

      const chatCompletion = await openai.chat.completions.create({
        messages: [
          { role: 'system', content: systemPrompt },
          ...relevantHistory,
          { role: 'user', content: message }
        ],
        model: 'gpt-3.5-turbo',
        temperature: 0.7,
        max_tokens: 800
      })

      const response = chatCompletion.choices[0].message.content

      // ‚úÖ Validar que la respuesta no sea null
      if (!response) {
        throw new Error('OpenAI no retorn√≥ una respuesta v√°lida')
      }

      const result = await handleOpenAIResponse(response, customerInfo, chat)
      const finalContentMain = addHelpOffer(result.response.content)

      const messagesToSave = [
        {
          role: 'user' as const,
          content: message,
          timestamp: new Date()
        },
        {
          role: 'assistant' as const,
          content: finalContentMain,
          timestamp: new Date(),
          responseTime: 0,
          respondedWithin2Hours: true
        }
      ]

      await saveCompleteChatSession(
        customerInfo.id,
        customerInfo.chatRoom[0].id,
        id,
        messagesToSave
      )

      await updateResolutionType(customerInfo.chatRoom[0].id, false)

      return {
        ...result,
        response: {
          ...result.response,
          content: finalContentMain
        }
      }
    }

    const isAppointment = isAppointmentRequest(message)
    if (isAppointment) {
      return {
        response: {
          role: 'assistant',
          content: 'Para agendar tu cita, necesito que me proporciones tu correo electr√≥nico. Por favor, comp√°rtelo conmigo.'
        }
      }
    }

    // ‚úÖ VERIFICAR SI PIDE HABLAR CON HUMANO SIN ESTAR AUTENTICADO
    if (detectHumanTransferRequest(message)) {
      return {
        response: {
          role: 'assistant',
          content: `Para conectarte con un humano, necesito algunos datos primero:

1. ¬øC√≥mo te llamas?
2. ¬øCu√°l es tu correo electr√≥nico?
3. ¬øTu n√∫mero de celular?

Una vez que proporciones esta informaci√≥n, te conectar√© inmediatamente con nuestro equipo humano.`
        }
      }
    }

    return await handleNoEmailFlow(message, chat)

  } catch (error) {
    return {
      response: {
        role: 'assistant',
        content: 'Lo siento, estoy teniendo dificultades t√©cnicas en este momento. ¬øPodr√≠as intentar de nuevo en unos momentos?'
      }
    }
  }
}

