'use server'

import { client } from '@/lib/prisma'
import { onRealTimeChat } from '../conversation'
import { clerkClient } from '@clerk/nextjs'
import { extractEmailsFromString, extractURLfromString } from '@/lib/utils'
import { onMailer } from '../mailer'
import OpenAi from 'openai'
import { TEXTILE_SERVICES, TEXTILE_SYSTEM_PROMPT, TEXTILE_MESSAGES } from '@/constants/services'
import { 
  generateSessionToken, 
  validateSessionToken, 
  getCustomerFromToken 
} from '@/lib/session'

const openai = new OpenAi({
  apiKey: process.env.OPEN_AI_KEY,
})

// ============================================
// OPTIMIZACI√ìN: Limitar contexto para reducir tokens
// ============================================
/**
 * Obtiene solo los mensajes relevantes del historial
 * Reduce consumo de tokens en 70-90%
 */
const getRelevantChatHistory = (
  chat: { role: 'user' | 'assistant'; content: string }[],
  maxMessages: number = 10 // Solo √∫ltimos 10 mensajes
) => {
  if (chat.length <= maxMessages) {
    return chat
  }
  
  // Tomar primer mensaje (contexto inicial) + √∫ltimos N mensajes
  const firstMessage = chat[0]
  const recentMessages = chat.slice(-maxMessages)
  
  return [firstMessage, ...recentMessages]
}

export const onStoreConversations = async (
  id: string,
  message: string,
  role: 'user' | 'assistant',
  userMessage?: string
) => {
  // Si es una respuesta del asistente, calcular m√©tricas de tiempo
  if (role === 'assistant') {
    // Obtener el √∫ltimo mensaje del usuario
    const lastUserMessage = await client.chatMessage.findFirst({
      where: {
        chatRoomId: id,
        role: 'user',
      },
      orderBy: {
        createdAt: 'desc',
      },
      select: {
        id: true,
        createdAt: true,
        message: true,
      },
    })

    if (lastUserMessage) {
      const now = new Date()
      const responseTimeInSeconds = Math.floor(
        (now.getTime() - lastUserMessage.createdAt.getTime()) / 1000
      )
      const respondedWithin2Hours = responseTimeInSeconds < 7200 // 2 horas = 7200 segundos

      // FR2: Evaluar efectividad de la respuesta
      const isEffective = await isResponseEffective(
        id, 
        userMessage || lastUserMessage.message, 
        message
      )

      await client.chatRoom.update({
        where: { id },
        data: {
          message: {
            create: {
              message,
              role,
              responseTime: responseTimeInSeconds,
              respondedWithin2Hours: isEffective, // FR2: Ahora significa "respondido efectivamente"
            },
          },
        },
      })

      // Actualizar m√©tricas con efectividad en lugar de solo tiempo
      await updateConversationMetrics(id, responseTimeInSeconds, isEffective)
      
      return
    }
  }

  // Para mensajes del usuario o si no hay mensaje previo
  await client.chatRoom.update({
    where: { id },
    data: {
      message: {
        create: {
          message,
          role,
        },
      },
    },
  })
}

export const onGetCurrentChatBot = async (idOrName: string) => {
  try {
    // Verificar si es un UUID (ID) o un nombre
    const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(idOrName)

    const chatbot = await client.domain.findFirst({
      where: isUUID ? {
        id: idOrName,
      } : {
        name: idOrName,
      },
      select: {
        id: true,
        helpdesk: true,
        name: true,
        chatBot: {
          select: {
            id: true,
            welcomeMessage: true,
            icon: true,
            textColor: true,
            background: true,
            helpdesk: true,
          },
        },
      },
    })

    if (chatbot) {
      return chatbot
    } else {
      console.log(`No se encontr√≥ chatbot para: ${idOrName}`)
    }
  } catch (error) {
    console.log('Error en onGetCurrentChatBot:', error)
  }
}

// ===== TIPOS Y INTERFACES =====
interface CustomerData {
  email?: string
  name?: string
  phone?: string
}

interface ChatBotDomain {
  name: string
  helpdesk: Array<{ question: string; answer: string }>
  products: Array<{ name: string; price: number; image: string }>
  filterQuestions: Array<{ question: string }>
}

interface CustomerInfo {
  id: string
  email: string
  questions: any[]
  chatRoom: Array<{ id: string; live: boolean; mailed: boolean }>
}

// ============================================
// OPTIMIZACI√ìN: Respuestas r√°pidas sin OpenAI
// ============================================
/**
 * Genera respuestas instant√°neas para casos comunes
 * Reduce latencia de 2-5s a 50ms y ahorra tokens
 */
const getQuickResponse = (
  message: string,
  customerInfo: any,
  domainId: string
): { content: string; link?: string } | null => {
  const lowerMsg = message.toLowerCase().trim()
  
  // 1. Agendamiento de citas
  if (/\b(agendar|cita|reservar|reserva|appointment)\b/.test(lowerMsg)) {
    return {
      content: '¬°Perfecto! Aqu√≠ tienes el enlace para agendar tu cita:',
      link: `http://localhost:3000/portal/${domainId}/appointment/${customerInfo.id}`
    }
  }
  
  // 2. Saludos simples
  if (/^(hola|hi|hey|buenos d√≠as|buenas tardes|buenas noches|qu√© tal)\.?$/i.test(lowerMsg)) {
    return {
      content: `¬°Hola ${customerInfo.name || ''}! Soy Lunari AI. ¬øEn qu√© puedo ayudarte hoy? üòä`
    }
  }
  
  // 3. Despedidas
  if (/^(gracias|muchas gracias|ok gracias|perfecto gracias|chao|adi√≥s|hasta luego)\.?$/i.test(lowerMsg)) {
    return {
      content: `¬°De nada, ${customerInfo.name || ''}! Fue un placer ayudarte. Si necesitas algo m√°s, aqu√≠ estar√©. üòä`
    }
  }
  
  // 4. Horarios
  if (/\b(horario|hora de atenci√≥n|cu√°ndo abren|est√° abierto|abren)\b/.test(lowerMsg)) {
    return {
      content: 'Nuestro horario de atenci√≥n es de lunes a viernes de 9:00 AM a 6:00 PM. ¬øTe gustar√≠a agendar una cita?'
    }
  }
  
  // 5. Ubicaci√≥n
  if (/\b(d√≥nde est√°n|ubicaci√≥n|direcci√≥n|c√≥mo llego)\b/.test(lowerMsg)) {
    return {
      content: 'Nos ubicamos en [Direcci√≥n]. ¬øNecesitas ayuda con algo m√°s o deseas agendar una cita?'
    }
  }
  
  // No hay respuesta r√°pida
  return null
}

// ============================================
// GESTI√ìN DE SESIONES AUTENTICADAS
// ============================================

/**
 * Maneja la conversaci√≥n de un usuario con sesi√≥n v√°lida
 * Este usuario ya est√° identificado, no necesita proporcionar datos
 */
const handleAuthenticatedUser = async (
  customerInfo: any,
  message: string,
  author: 'user',
  chat: { role: 'user' | 'assistant'; content: string }[],
  domainId: string,
  chatBotDomain: any,
  sessionToken: string
) => {
  console.log(`üë§ Usuario autenticado: ${customerInfo.name || customerInfo.email}`)
  
  // 1. FR4: Detectar si el usuario est√° calificando (1-5)
  const satisfactionRating = detectSatisfactionRating(message)
  if (satisfactionRating && !customerInfo.chatRoom[0].satisfactionCollected) {
    await saveSatisfactionRating(
      customerInfo.chatRoom[0].id,
      customerInfo.id,
      domainId,
      satisfactionRating,
      message
    )
    
    return {
      response: {
        role: 'assistant',
        content: `¬°Muchas gracias por tu calificaci√≥n de ${satisfactionRating}/5! Tu opini√≥n es muy importante para nosotros y nos ayuda a mejorar nuestro servicio. üòä`
      },
      sessionToken // Mantener token
    }
  }

  // 2. Manejar modo tiempo real si est√° activo
  if (customerInfo.chatRoom[0].live) {
    await onStoreConversations(customerInfo.chatRoom[0].id, message, author)
    
    return {
      live: true,
      chatRoom: customerInfo.chatRoom[0].id,
      sessionToken // Mantener token
    }
  }

  // 3. Almacenar mensaje del usuario
  await onStoreConversations(customerInfo.chatRoom[0].id, message, author)

  // 4. OPTIMIZACI√ìN: Intentar respuesta r√°pida primero (sin OpenAI)
  const quickResponse = getQuickResponse(message, customerInfo, domainId)
  
  if (quickResponse) {
    console.log('‚úÖ Respuesta r√°pida utilizada (sin OpenAI)')
    
    await onStoreConversations(
      customerInfo.chatRoom[0].id,
      quickResponse.content,
      'assistant',
      message
    )
    
    await updateResolutionType(customerInfo.chatRoom[0].id, false)
    
    return {
      response: {
        role: 'assistant' as const,
        content: quickResponse.content,
        link: quickResponse.link
      },
      sessionToken // Mantener token
    }
  }

  // 5. Generar contexto para OpenAI
  const contextSpecificPrompt = getContextSpecificPrompt(message, domainId, customerInfo.id)
  
  const customerDataForContext = {
    email: customerInfo.email,
    name: customerInfo.name,
    phone: customerInfo.phone
  }

  const systemPrompt = generateOpenAIContext(
    chatBotDomain, 
    customerDataForContext, 
    contextSpecificPrompt, 
    domainId, 
    customerInfo
  )

  // 6. Usar solo historial relevante (√∫ltimos 10 mensajes)
  const relevantHistory = getRelevantChatHistory(chat, 10)

  // 7. Obtener respuesta de OpenAI
  const chatCompletion = await openai.chat.completions.create({
    messages: [
      { role: 'system', content: systemPrompt },
      ...relevantHistory,
      { role: 'user', content: message }
    ],
    model: 'gpt-3.5-turbo',
    temperature: 0.7,
    max_tokens: 300
  })

  // 8. Manejar respuesta
  const response = chatCompletion.choices[0].message.content
  const result = await handleOpenAIResponse(response, customerInfo, chat)

  // 9. Almacenar respuesta con m√©tricas
  await onStoreConversations(
    customerInfo.chatRoom[0].id,
    result.response.content,
    'assistant',
    message
  )

  // 10. Actualizar tipo de resoluci√≥n
  await updateResolutionType(customerInfo.chatRoom[0].id, false)

  // 11. Verificar si solicitar calificaci√≥n
  const askSatisfaction = await shouldAskForSatisfaction(customerInfo.chatRoom[0].id)
  
  if (askSatisfaction) {
    return {
      ...result,
      response: {
        ...result.response,
        content: `${result.response.content}\n\n---\n\n¬øC√≥mo calificar√≠as la atenci√≥n que recibiste del 1 al 5? (1 = Muy insatisfecho, 5 = Muy satisfecho)`
      },
      sessionToken // Mantener token
    }
  }

  return {
    ...result,
    sessionToken // Mantener token
  }
}

// ===== FUNCIONES AUXILIARES =====

/**
 * FR1 y FR2: Actualizar o crear m√©tricas de conversaci√≥n
 */
const updateConversationMetrics = async (
  chatRoomId: string,
  responseTime: number,
  respondedWithin2Hours: boolean
) => {
  try {
    // Obtener el domainId del chatRoom
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: chatRoomId },
      select: {
        Customer: {
          select: { domainId: true }
        }
      }
    })

    if (!chatRoom?.Customer?.domainId) return

    const domainId = chatRoom.Customer.domainId

    // Buscar si ya existe un registro de m√©tricas para este chatRoom
    const existingMetrics = await client.conversationMetrics.findFirst({
      where: { chatRoomId }
    })

    if (existingMetrics) {
      // Actualizar m√©tricas existentes
      const newMessagesCount = existingMetrics.messagesCount + 1
      const newTotalResponseTime = existingMetrics.totalResponseTime + responseTime
      const newAverageResponseTime = Math.floor(newTotalResponseTime / newMessagesCount)
      const newMessagesRespondedOnTime = respondedWithin2Hours 
        ? existingMetrics.messagesRespondedOnTime + 1 
        : existingMetrics.messagesRespondedOnTime
      const newTotalMessagesReceived = existingMetrics.totalMessagesReceived + 1
      const newPercentageOnTime = (newMessagesRespondedOnTime / newTotalMessagesReceived) * 100

      await client.conversationMetrics.update({
        where: { id: existingMetrics.id },
        data: {
          averageResponseTime: newAverageResponseTime,
          totalResponseTime: newTotalResponseTime,
          messagesCount: newMessagesCount,
          messagesRespondedOnTime: newMessagesRespondedOnTime,
          totalMessagesReceived: newTotalMessagesReceived,
          percentageOnTime: newPercentageOnTime,
        }
      })
    } else {
      // Crear nuevo registro de m√©tricas
      const percentageOnTime = respondedWithin2Hours ? 100 : 0

      await client.conversationMetrics.create({
        data: {
          chatRoomId,
          domainId,
          averageResponseTime: responseTime,
          totalResponseTime: responseTime,
          messagesCount: 1,
          messagesRespondedOnTime: respondedWithin2Hours ? 1 : 0,
          totalMessagesReceived: 1,
          percentageOnTime,
        }
      })
    }
  } catch (error) {
    console.log('Error al actualizar m√©tricas de conversaci√≥n:', error)
  }
}

/**
 * FR3: Detectar y marcar el tipo de resoluci√≥n de la conversaci√≥n
 */
const updateResolutionType = async (chatRoomId: string, isNewConversation: boolean) => {
  try {
    // Contar los mensajes del usuario en esta conversaci√≥n
    const userMessagesCount = await client.chatMessage.count({
      where: {
        chatRoomId,
        role: 'user'
      }
    })

    // Verificar si el chat pas√≥ a modo live (escalado a humano)
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: chatRoomId },
      select: { live: true }
    })

    let resolutionType: 'FIRST_INTERACTION' | 'FOLLOW_UP' | 'ESCALATED' | 'UNRESOLVED' = 'UNRESOLVED'
    let resolvedInFirstInteraction: boolean | null = null

    if (chatRoom?.live) {
      // Si est√° en modo live, fue escalado
      resolutionType = 'ESCALATED'
      resolvedInFirstInteraction = false
    } else if (userMessagesCount === 1) {
      // Si solo hay un mensaje del usuario, puede ser resoluci√≥n en primera interacci√≥n
      resolutionType = 'FIRST_INTERACTION'
      resolvedInFirstInteraction = true
    } else if (userMessagesCount > 1) {
      // Si hay m√°s de un mensaje, es seguimiento
      resolutionType = 'FOLLOW_UP'
      resolvedInFirstInteraction = false
    }

    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        resolutionType,
        resolvedInFirstInteraction,
      }
    })
  } catch (error) {
    console.log('Error al actualizar tipo de resoluci√≥n:', error)
  }
}

/**
 * FR2: Detectar si una respuesta fue efectiva (oportuna) - no dio vueltas
 * Una respuesta es efectiva si:
 * 1. Es directa (no pide informaci√≥n redundante)
 * 2. Resuelve en ‚â§2 turnos
 * 3. No hace preguntas cuando ya tiene la informaci√≥n
 */
const isResponseEffective = async (
  chatRoomId: string,
  userMessage: string,
  botResponse: string
): Promise<boolean> => {
  try {
    // Contar turnos de conversaci√≥n (pares user-assistant)
    const messagesCount = await client.chatMessage.count({
      where: { chatRoomId }
    })
    const turnsCount = Math.ceil(messagesCount / 2)

    // Criterio 1: Si es el primer o segundo turno y el bot no pide info redundante ‚Üí Efectivo
    if (turnsCount <= 2) {
      // Verificar que el bot no est√© pidiendo informaci√≥n que ya tiene
      const redundantPatterns = [
        /cu√°l es tu (correo|email|nombre)/i,
        /podr√≠as darme tu (correo|email|nombre)/i,
        /necesito tu (correo|email|nombre)/i,
      ]
      
      const isRedundant = redundantPatterns.some(pattern => pattern.test(botResponse))
      
      if (!isRedundant) {
        return true // Respuesta efectiva
      }
    }

    // Criterio 2: Si el usuario pide una acci√≥n espec√≠fica y el bot la ejecuta ‚Üí Efectivo
    const actionRequests = [
      /(?:quiero|deseo|necesito|puedo)\s+(?:agendar|reservar|comprar|adquirir)/i,
      /(?:dame|muestra|ens√©√±ame)\s+(?:productos|servicios|precios)/i,
    ]
    
    const requestsAction = actionRequests.some(pattern => pattern.test(userMessage))
    const providesLink = /http/.test(botResponse)
    
    if (requestsAction && providesLink) {
      return true // Respondi√≥ directamente con enlace
    }

    // Criterio 3: Si es m√°s de 3 turnos ‚Üí Probablemente dio vueltas
    if (turnsCount > 3) {
      return false
    }

    // Por defecto, considerar efectivo si cumple condiciones b√°sicas
    return turnsCount <= 2

  } catch (error) {
    console.log('Error al evaluar efectividad de respuesta:', error)
    return false
  }
}

/**
 * FR4: Detectar si el cliente est√° calificando la atenci√≥n (1-5)
 */
const detectSatisfactionRating = (message: string): number | null => {
  // Patrones para detectar calificaci√≥n
  const ratingPatterns = [
    /(?:califico|calificar|puntuaci√≥n|nota|rating|estrella).*?([1-5])/i,
    /^([1-5])$/,
    /([1-5])\s*(?:estrella|star)/i,
  ]

  for (const pattern of ratingPatterns) {
    const match = message.match(pattern)
    if (match) {
      const rating = parseInt(match[1])
      if (rating >= 1 && rating <= 5) {
        return rating
      }
    }
  }

  return null
}

/**
 * FR4: Solicitar calificaci√≥n de satisfacci√≥n al cliente
 */
const shouldAskForSatisfaction = async (chatRoomId: string): Promise<boolean> => {
  try {
    const chatRoom = await client.chatRoom.findUnique({
      where: { id: chatRoomId },
      select: {
        satisfactionCollected: true,
        resolutionType: true,
        message: {
          select: { id: true },
          where: { role: 'user' }
        }
      }
    })

    // Solicitar satisfacci√≥n si:
    // 1. No se ha recolectado a√∫n
    // 2. Hay al menos 2 mensajes del usuario (conversaci√≥n m√≠nima)
    // 3. La conversaci√≥n est√° resuelta o en seguimiento
    return (
      chatRoom?.satisfactionCollected === false &&
      (chatRoom?.message?.length || 0) >= 2 &&
      (chatRoom?.resolutionType === 'FIRST_INTERACTION' || 
       chatRoom?.resolutionType === 'FOLLOW_UP')
    )
  } catch (error) {
    console.log('Error al verificar solicitud de satisfacci√≥n:', error)
    return false
  }
}

/**
 * FR4: Guardar la calificaci√≥n de satisfacci√≥n del cliente
 */
const saveSatisfactionRating = async (
  chatRoomId: string,
  customerId: string,
  domainId: string,
  rating: number,
  comment?: string
) => {
  try {
    // Guardar en CustomerSatisfaction
    await client.customerSatisfaction.create({
      data: {
        chatRoomId,
        customerId,
        domainId,
        rating,
        comment,
      }
    })

    // Actualizar ChatRoom
    await client.chatRoom.update({
      where: { id: chatRoomId },
      data: {
        satisfactionRating: rating,
        satisfactionCollected: true,
        resolved: true,
        conversationEndedAt: new Date(),
      }
    })

    console.log(`‚úÖ Satisfacci√≥n guardada: ${rating}/5 para chatRoom ${chatRoomId}`)
  } catch (error) {
    console.log('Error al guardar satisfacci√≥n:', error)
  }
}

/**
 * Extrae informaci√≥n del cliente (email, nombre y tel√©fono) del mensaje
 * OPTIMIZADO: Maneja nombres compuestos correctamente
 */
const extractCustomerData = (message: string): CustomerData => {
  const email = extractEmailsFromString(message)?.[0]
  
  // Extraer nombre - MEJORADO para nombres compuestos
  let name: string | undefined
  
  // Patr√≥n 1: Capturar nombres despu√©s de "me llamo", "soy", etc.
  const namePatterns = [
    // "Me llamo Juan P√©rez" - captura hasta coma, punto, o palabras clave
    /(?:me llamo|soy|mi nombre es|ll√°mame)\s+([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+){0,5})(?=\s*[,.]|\s+(?:mi|y|correo|email|cel|tel√©fono|telefono)|$)/i,
    
    // "Soy Mar√≠a Garc√≠a L√≥pez, mi correo..."
    /(?:me llamo|soy|mi nombre es)\s+([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+){0,5})(?=\s*,)/i,
    
    // Nombre al inicio del mensaje: "Juan P√©rez, correo..."
    /^([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+){1,5})(?=\s*[,.]|\s+(?:mi|correo|email))/i
  ]
  
  for (const pattern of namePatterns) {
    const match = message.match(pattern)
    if (match) {
      name = match[1].trim()
      
      // Validar que sea un nombre v√°lido (no una palabra clave)
      const invalidNames = ['correo', 'email', 'celular', 'telefono', 'tel√©fono', 'cita', 'hola']
      if (!invalidNames.some(invalid => name?.toLowerCase().includes(invalid))) {
        // Limpiar y validar
        name = name.replace(/[^\w\s√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]/g, '').trim()
        
        // Debe tener al menos 2 caracteres y m√°ximo 60
        if (name.length >= 2 && name.length <= 60) {
          break // Nombre v√°lido encontrado
        }
      }
      name = undefined // Resetear si no es v√°lido
    }
  }
  
  // Fallback: Si no se encontr√≥ con patrones, buscar nombre entre comillas
  if (!name) {
    const quotedName = message.match(/["']([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±\s]+)["']/i)
    if (quotedName && quotedName[1].length >= 2 && quotedName[1].length <= 60) {
      name = quotedName[1].trim()
    }
  }
  
  // Extraer tel√©fono/celular (patrones peruanos)
  let phone: string | undefined
  // Buscar espec√≠ficamente despu√©s de palabras clave de tel√©fono
  const phoneKeywordsPattern = /(?:celular|tel√©fono|tel√©fono|phone|m√≥vil)\s*(?:es\s*)?(?:es\s*)?(?:\+?51\s?)?(9\d{8})/i
  const phoneKeywordsMatch = message.match(phoneKeywordsPattern)
  
  if (phoneKeywordsMatch) {
    phone = phoneKeywordsMatch[1]
  } else {
    // Patr√≥n general para n√∫meros de celular peruanos
    const phonePattern = /(?:\+?51\s?)?(9\d{8})/g
    const phoneMatch = message.match(phonePattern)
    if (phoneMatch) {
      phone = phoneMatch[0].replace(/\s/g, '').replace(/\+51/, '')
    }
  }
  
  return { email, name, phone }
}

/**
 * Busca o crea un cliente en la base de datos
 * CORREGIDO: Retorna estructura correcta
 */
const findOrCreateCustomer = async (domainId: string, customerData: CustomerData, filterQuestions: any[]) => {
  const existingCustomer = await client.domain.findUnique({
    where: { id: domainId },
    select: {
      User: { select: { clerkId: true } },
      name: true,
      customer: {
        where: { email: { startsWith: customerData.email } },
        select: {
          id: true,
          email: true,
          name: true,
          phone: true,
          questions: true,
          chatRoom: {
            select: { id: true, live: true, mailed: true, satisfactionCollected: true }
          }
        }
      }
    }
  })

  if (!existingCustomer?.customer.length) {
    // Crear nuevo cliente
    await client.domain.update({
      where: { id: domainId },
      data: {
        customer: {
          create: {
            email: customerData.email,
            name: customerData.name,
            phone: customerData.phone,
            status: true,
            totalInteractions: 1,
            lastActiveAt: new Date(),
            questions: { create: filterQuestions },
            chatRoom: { create: {} }
          }
        }
      }
    })
    
    // ‚úÖ CORREGIDO: Buscar el cliente reci√©n creado con la estructura correcta
    const createdCustomer = await client.domain.findUnique({
      where: { id: domainId },
      select: {
        User: { select: { clerkId: true } },
        name: true,
        customer: {
          where: { email: { startsWith: customerData.email } },
          select: {
            id: true,
            email: true,
            name: true,
            phone: true,
            questions: true,
            chatRoom: {
              select: { id: true, live: true, mailed: true, satisfactionCollected: true }
            }
          }
        }
      }
    })
    
    return { customer: createdCustomer, isNew: true }
  }

  return { customer: existingCustomer, isNew: false }
}

/**
 * Actualiza los datos del cliente existente si se detecta informaci√≥n nueva
 */
const updateCustomerData = async (customerId: string, customerData: CustomerData) => {
  const updateData: any = {
    lastActiveAt: new Date(),
    totalInteractions: { increment: 1 }
  }

  // Solo actualizar si hay datos nuevos
  if (customerData.name) updateData.name = customerData.name
  if (customerData.phone) updateData.phone = customerData.phone

  await client.customer.update({
    where: { id: customerId },
    data: updateData
  })
}

/**
 * OPTIMIZACI√ìN: Prompt compacto para reducir tokens
 * Reducci√≥n de ~800 tokens a ~300 tokens (62% ahorro)
 */
const generateOpenAIContext = (
  chatBotDomain: ChatBotDomain,
  customerData: CustomerData,
  contextSpecificPrompt: string,
  domainId: string,
  customerInfo?: any
): string => {
  // Contextos compactos
  const helpdeskContext = chatBotDomain.helpdesk.length > 0
    ? `\nFAQs: ${chatBotDomain.helpdesk.map(h => h.question).join(', ')}`
    : ''
    
  const productsContext = chatBotDomain.products.length > 0
    ? `\nProductos: ${chatBotDomain.products.map(p => `${p.name} (S/${p.price})`).join(', ')}`
    : ''

  return `Eres Lunari AI, asistente de textiles para ${chatBotDomain.name}.

CLIENTE: ${customerData.name || 'Usuario'} | ${customerData.email} | ${customerData.phone || 'Sin tel√©fono'}

‚ö†Ô∏è REGLAS CR√çTICAS:
1. NO pidas datos que ya tienes (nombre, email, tel√©fono arriba)
2. Si dice "agendar/reservar/cita" ‚Üí Da SOLO este enlace: http://localhost:3000/portal/${domainId}/appointment/${customerInfo?.id}
3. NO preguntes fecha/hora para citas, solo da el enlace
4. Para compras ‚Üí Enlace: http://localhost:3000/portal/${domainId}/payment/${customerInfo?.id}
5. Si fuera de contexto textil ‚Üí "(realtime)" para humano
6. NUNCA inventes productos/servicios${helpdeskContext}${productsContext}

Responde en espa√±ol, breve, amigable y directo. Usa el nombre del cliente.`
}

/**
 * Verifica si el mensaje es una solicitud de agendamiento de cita
 */
const isAppointmentRequest = (message: string): boolean => {
  const appointmentKeywords = ['reservar cita', 'agendar cita', 'generar cita', 'quiero cita', 'necesito cita', 'cita']
  return appointmentKeywords.some(keyword => 
    message.toLowerCase().includes(keyword.toLowerCase())
  )
}

/**
 * Determina el contexto espec√≠fico basado en el tipo de solicitud
 */
const getContextSpecificPrompt = (message: string, domainId: string, customerId: string): string => {
  const isPaymentRequest = /pago|pagar|comprar|adquirir|producto/i.test(message)
  const isAppointmentRequest = /cita|agendar|consulta|reuni√≥n|visita/i.test(message)
  const isGeneralQuery = /ayuda|informaci√≥n|consulta|pregunta/i.test(message)

  if (isPaymentRequest) {
    return `
CONTEXTO ACTUAL: El cliente est√° solicitando ayuda con un pago o compra.
RESPUESTA ESPERADA: Debes ayudarlo con el proceso de pago, mostrar productos disponibles si es necesario, y proporcionar el enlace de pago: http://localhost:3000/portal/${domainId}/payment/${customerId}
NO pidas email nuevamente, ya lo tienes.`
  } else if (isAppointmentRequest) {
    return `
CONTEXTO ACTUAL: El cliente est√° solicitando agendar una cita o consulta.
RESPUESTA ESPERADA: Debes ayudarlo con el proceso de agendamiento y proporcionar el enlace de citas: http://localhost:3000/portal/${domainId}/appointment/${customerId}
NO pidas email nuevamente, ya lo tienes.`
  } else if (isGeneralQuery) {
    return `
CONTEXTO ACTUAL: El cliente est√° haciendo una consulta general.
RESPUESTA ESPERADA: Responde su consulta de manera √∫til y ofrece ayuda adicional.
NO pidas email nuevamente, ya lo tienes.`
  }
  
  return ''
}

/**
 * Maneja la respuesta de OpenAI y ejecuta acciones espec√≠ficas
 */
const handleOpenAIResponse = async (
  response: string,
  customerInfo: CustomerInfo,
  chatHistory: any[]
) => {
  // Manejar modo tiempo real
  if (response.includes('(realtime)')) {
    await client.chatRoom.update({
      where: { id: customerInfo.chatRoom[0].id },
      data: { live: true }
    })
    
    return {
      response: {
        role: 'assistant' as const,
        content: response.replace('(realtime)', '')
      }
    }
  }

  // Manejar preguntas completadas
  if (chatHistory[chatHistory.length - 1]?.content.includes('(complete)')) {
    const firstUnansweredQuestion = await client.customerResponses.findFirst({
              where: {
        customerId: customerInfo.id,
        answered: null
      },
      select: { id: true },
      orderBy: { question: 'asc' }
    })
    
          if (firstUnansweredQuestion) {
            await client.customerResponses.update({
        where: { id: firstUnansweredQuestion.id },
        data: { answered: chatHistory[chatHistory.length - 1].content }
      })
    }
  }

  // Manejar enlaces generados
  const generatedLink = extractURLfromString(response)
          if (generatedLink) {
    const cleanLink = generatedLink[0].replace(/[()]+$/, '').trim()
    return {
      response: {
        role: 'assistant' as const,
        content: '¬°Perfecto! Puedes hacer clic en el siguiente enlace para continuar:',
        link: cleanLink
      }
    }
  }

  // Respuesta normal
  return {
    response: {
      role: 'assistant' as const,
      content: response
    }
  }
}

/**
 * Maneja el flujo cuando no hay email del cliente
 */
const handleNoEmailFlow = async (message: string, chatHistory: any[]) => {
  // Extraer datos disponibles del mensaje actual
  const extractedData = extractCustomerData(message)
  
  // Determinar qu√© informaci√≥n ya tenemos
  const hasName = !!extractedData.name
  const hasEmail = !!extractedData.email
  const hasPhone = !!extractedData.phone
  
  // Crear prompt din√°mico basado en lo que ya sabemos
  let systemPrompt = `Eres **Lunari AI**, un asistente virtual profesional y amigable. Tu objetivo es obtener la informaci√≥n necesaria del cliente de manera natural y conversacional.

## INFORMACI√ìN ACTUAL DEL CLIENTE:
${hasName ? `- Nombre: ${extractedData.name}` : '- Nombre: No disponible'}
${hasEmail ? `- Email: ${extractedData.email}` : '- Email: No disponible'}
${hasPhone ? `- Tel√©fono: ${extractedData.phone}` : '- Tel√©fono: No disponible'}

## INSTRUCCIONES CR√çTICAS PARA EL FORMATO:
- Da una bienvenida c√°lida y profesional: "¬°Hola! Soy Lunari AI, tu asistente virtual."
- SIEMPRE da un salto de l√≠nea despu√©s del saludo
- Luego escribe: "Para brindarte la mejor atenci√≥n, necesito algunos datos:"
- SIEMPRE da otro salto de l√≠nea despu√©s de esta frase
- Enumera SOLO los datos que faltan, numerados del 1 al 3 m√°ximo
- CADA PREGUNTA debe estar en una l√≠nea separada
- Los √∫nicos datos a pedir son: nombre, correo electr√≥nico, n√∫mero de celular
- Si ya tienes el nombre, √∫salo en la conversaci√≥n
- Mant√©n un tono amigable y profesional
- No pidas otros datos, solo estos 3 espec√≠ficos

## FORMATO OBLIGATORIO:
Debes responder EXACTAMENTE en este formato:

         ${TEXTILE_MESSAGES.WELCOME}

         Para brindarte la mejor atenci√≥n especializada en textiles, necesito algunos datos:

         1. ¬øC√≥mo te llamas?
         2. ¬øCu√°l es tu correo electr√≥nico?
         3. ¬øTu n√∫mero de celular?

         Cada n√∫mero debe estar en una l√≠nea separada. NO pongas todo en una sola l√≠nea.

## FLUJO DE INFORMACI√ìN:
1. **Si no tienes nombre**: Pide el nombre primero
2. **Si no tienes email**: Solicita el email explicando que es para brindar mejor servicio
3. **Si no tienes tel√©fono**: Puedes solicitar el tel√©fono para contacto adicional (opcional)

## EJEMPLOS DE RESPUESTAS:

### Si no tienes nada:
"¬°Hola! Soy Lunari AI, tu asistente virtual.

Para brindarte la mejor atenci√≥n, necesito algunos datos:

1. ¬øC√≥mo te llamas?
2. ¬øCu√°l es tu correo electr√≥nico?  
3. ¬øTu n√∫mero de celular?"

### Si ya tienes nombre pero no email:
"¬°Hola ${extractedData.name}! Soy Lunari AI.

Para brindarte la mejor atenci√≥n, necesito algunos datos:

1. ¬øCu√°l es tu correo electr√≥nico?
2. ¬øTu n√∫mero de celular?"

### Si ya tienes nombre y email pero no tel√©fono:
"¬°Perfecto ${extractedData.name}! Ya tengo tu email (${extractedData.email}).

Para completar tu perfil, necesito:

1. ¬øTu n√∫mero de celular?"

## TONO:
- Amigable pero profesional
- Emp√°tico con las necesidades del usuario
- Claro en las instrucciones
- Personalizado usando la informaci√≥n disponible

RECUERDA: S√© natural, amigable y profesional. Solo pide la informaci√≥n que realmente necesitas.

         IMPORTANTE: Cuando pidas los datos, usa EXACTAMENTE este formato con saltos de l√≠nea:
         ${TEXTILE_MESSAGES.WELCOME}

         Para brindarte la mejor atenci√≥n especializada en textiles, necesito algunos datos:

         1. ¬øC√≥mo te llamas?
         2. ¬øCu√°l es tu correo electr√≥nico?
         3. ¬øTu n√∫mero de celular?

         NO pongas todo en una sola l√≠nea. Cada pregunta debe estar en su propia l√≠nea.`

  const chatCompletion = await openai.chat.completions.create({
    messages: [
      { role: 'system', content: systemPrompt },
      ...chatHistory,
      { role: 'user', content: message }
        ],
        model: 'gpt-3.5-turbo',
        temperature: 0.7,
    max_tokens: 300
  })

  return {
    response: {
      role: 'assistant' as const,
      content: chatCompletion.choices[0].message.content
    }
  }
}

// ===== FUNCI√ìN PRINCIPAL REFACTORIZADA =====
export const onAiChatBotAssistant = async (
  id: string,
  chat: { role: 'user' | 'assistant'; content: string }[],
  author: 'user',
  message: string,
  sessionToken?: string // ‚úÖ NUEVO: Token de sesi√≥n opcional
) => {
  try {
    // 1. Obtener datos del dominio del chatbot
    const chatBotDomain = await client.domain.findUnique({
      where: { id },
      select: {
        name: true,
        helpdesk: { select: { question: true, answer: true } },
        products: { select: { name: true, price: true, image: true } },
        filterQuestions: {
          where: { answered: null },
          select: { question: true }
        }
      }
    })

    if (!chatBotDomain) {
      throw new Error('Chatbot domain not found')
    }

    // 2. ‚úÖ NUEVA FUNCIONALIDAD: Intentar recuperar sesi√≥n desde token
    if (sessionToken) {
      console.log('üîê Token de sesi√≥n detectado, validando...')
      
      const customerFromToken = await getCustomerFromToken(sessionToken, id)
      
      if (customerFromToken && customerFromToken.chatRoom && customerFromToken.chatRoom.length > 0) {
        console.log(`‚úÖ Sesi√≥n recuperada autom√°ticamente: ${customerFromToken.name || customerFromToken.email}`)
        
        const customerInfo = {
          ...customerFromToken,
          chatRoom: customerFromToken.chatRoom
        }

        // Usar este flujo directo con el usuario recuperado
        return await handleAuthenticatedUser(
          customerInfo,
          message,
          author,
          chat,
          id,
          chatBotDomain,
          sessionToken
        )
      } else {
        console.log('‚ö†Ô∏è Token inv√°lido o expirado, continuando con flujo normal')
      }
    }

    // 3. FLUJO NORMAL: Buscar en todo el historial de chat si ya hay un email
    let existingEmail: string | null = null
    for (const msg of chat) {
      const emailInHistory = extractEmailsFromString(msg.content)?.[0]
      if (emailInHistory) {
        existingEmail = emailInHistory
        break
      }
    }

    // Tambi√©n buscar en el mensaje actual
    const customerDataFromCurrentMessage = extractCustomerData(message)
    const emailFromCurrentMessage = customerDataFromCurrentMessage.email

    // Usar el email que encontremos (prioridad: mensaje actual > historial)
    const finalEmail = emailFromCurrentMessage || existingEmail

    // 4. Si tenemos email (de cualquier fuente), buscar o crear cliente
    if (finalEmail) {
      console.log('‚úÖ Email encontrado:', finalEmail)
      
      // Buscar si ya existe el cliente con este email
      const existingCustomer = await client.domain.findUnique({
        where: { id },
        select: {
          name: true,
          customer: {
            where: { 
              email: { 
                contains: finalEmail,
                mode: 'insensitive'
              } 
            },
            select: {
              id: true,
              email: true,
              name: true,
              phone: true,
              questions: true,
              chatRoom: {
                select: { 
                  id: true, 
                  live: true, 
                  mailed: true,
                  satisfactionCollected: true 
                }
              }
            }
          }
        }
      })

      let customerInfo: any = null
      let isNewCustomer = false

      // Si el cliente YA existe, usar sus datos
      if (existingCustomer?.customer && existingCustomer.customer.length > 0) {
        console.log('‚úÖ Cliente existente encontrado')
        customerInfo = existingCustomer.customer[0]
        isNewCustomer = false

        // Actualizar datos si el mensaje actual tiene informaci√≥n nueva
        if (customerDataFromCurrentMessage.name || customerDataFromCurrentMessage.phone) {
          await updateCustomerData(customerInfo.id, customerDataFromCurrentMessage)
        }
      } else {
        // Cliente nuevo - crear con todos los datos disponibles
        console.log('‚ú® Creando nuevo cliente')
        
        // Combinar datos del mensaje actual con el email encontrado
        const fullCustomerData = {
          email: finalEmail,
          name: customerDataFromCurrentMessage.name,
          phone: customerDataFromCurrentMessage.phone
        }

        const newCustomerResult = await findOrCreateCustomer(
          id,
          fullCustomerData,
          chatBotDomain.filterQuestions
        )

        const customerResultData = newCustomerResult.customer as any
        customerInfo = customerResultData.customer[0]
        isNewCustomer = true

        // ‚úÖ Generar token de sesi√≥n para el nuevo cliente
        const sessionData = await generateSessionToken(
          customerInfo.id,
          customerInfo.email,
          id,
          customerInfo.chatRoom[0].id
        )

        console.log(`üéüÔ∏è Token generado para nuevo cliente: ${customerInfo.email}`)

        // Si es nuevo, dar bienvenida CON TOKEN
        return {
          response: {
            role: 'assistant',
            content: `¬°Bienvenido ${fullCustomerData.name || 'a Lunari AI'}! ${TEXTILE_MESSAGES.WELCOME} ${TEXTILE_MESSAGES.SERVICES_DESCRIPTION} ¬øEn qu√© puedo ayudarte hoy?`
          },
          sessionToken: sessionData.token, // ‚úÖ Enviar token al frontend
          sessionData: {
            customerId: customerInfo.id,
            email: customerInfo.email,
            name: customerInfo.name,
            expiresAt: sessionData.expiresAt
          }
        }
      }

      // ‚úÖ Cliente existente - Generar token si no tiene sesi√≥n activa
      if (!sessionToken && customerInfo) {
        const sessionData = await generateSessionToken(
          customerInfo.id,
          customerInfo.email || finalEmail,
          id,
          customerInfo.chatRoom[0].id
        )
        
        console.log(`üéüÔ∏è Token generado para cliente existente: ${customerInfo.email}`)
        
        // Opcional: Saludar al usuario de regreso
        if (customerInfo.name && customerInfo.totalInteractions > 1) {
          console.log(`üëã Cliente recurrente detectado: ${customerInfo.name} (${customerInfo.totalInteractions} visitas)`)
        }
      }

      // 4. CLIENTE EXISTE - Verificar si es solicitud de agendamiento
      const isAppointment = isAppointmentRequest(message)
      
      if (isAppointment) {
        console.log('üìÖ Solicitud de agendamiento detectada')
        
        // DAR ENLACE DIRECTO - NO PREGUNTAR POR FECHA/HORA
        await onStoreConversations(customerInfo.chatRoom[0].id, message, author)
        await onStoreConversations(
          customerInfo.chatRoom[0].id,
          `¬°Perfecto! Aqu√≠ tienes el enlace para agendar tu cita: http://localhost:3000/portal/${id}/appointment/${customerInfo.id}`,
          'assistant',
          message
        )
        
        await updateResolutionType(customerInfo.chatRoom[0].id, false)
        
        return {
          response: {
            role: 'assistant',
            content: `¬°Perfecto! Aqu√≠ tienes el enlace para agendar tu cita:`,
            link: `http://localhost:3000/portal/${id}/appointment/${customerInfo.id}`
          }
        }
      }

      // 5. FR4: Detectar si el usuario est√° calificando (1-5)
      const satisfactionRating = detectSatisfactionRating(message)
      if (satisfactionRating && !customerInfo.chatRoom[0].satisfactionCollected) {
        await saveSatisfactionRating(
          customerInfo.chatRoom[0].id,
          customerInfo.id,
          id,
          satisfactionRating,
          message
        )
        
        return {
          response: {
            role: 'assistant',
            content: `¬°Muchas gracias por tu calificaci√≥n de ${satisfactionRating}/5! Tu opini√≥n es muy importante para nosotros y nos ayuda a mejorar nuestro servicio. üòä`
          }
        }
      }

      // 6. Manejar modo tiempo real si est√° activo
      if (customerInfo.chatRoom[0].live) {
        await onStoreConversations(customerInfo.chatRoom[0].id, message, author)

        // Marcar como mailed si es necesario
        if (!customerInfo.chatRoom[0].mailed) {
          // Buscar el usuario owner del dominio
          const domainOwner = await client.domain.findUnique({
            where: { id },
            select: {
              User: {
                select: { clerkId: true }
              }
            }
          })

          if (domainOwner?.User?.clerkId) {
            const user = await clerkClient.users.getUser(domainOwner.User.clerkId)
            onMailer(user.emailAddresses[0].emailAddress)

            await client.chatRoom.update({
              where: { id: customerInfo.chatRoom[0].id },
              data: { mailed: true }
            })
          }
        }

        return {
          live: true,
          chatRoom: customerInfo.chatRoom[0].id
        }
      }

      // 7. Almacenar mensaje del usuario
      await onStoreConversations(customerInfo.chatRoom[0].id, message, author)

      // 8. OPTIMIZACI√ìN: Intentar respuesta r√°pida primero (sin OpenAI)
      const quickResponse = getQuickResponse(message, customerInfo, id)
      
      if (quickResponse) {
        console.log('‚úÖ Respuesta r√°pida utilizada (sin OpenAI)')
        
        // Guardar respuesta r√°pida
        await onStoreConversations(
          customerInfo.chatRoom[0].id,
          quickResponse.content,
          'assistant',
          message
        )
        
        // Actualizar m√©tricas
        await updateResolutionType(customerInfo.chatRoom[0].id, false)
        
        return {
          response: {
            role: 'assistant' as const,
            content: quickResponse.content,
            link: quickResponse.link
          }
        }
      }

      // 9. Generar contexto espec√≠fico para la respuesta
      const contextSpecificPrompt = getContextSpecificPrompt(message, id, customerInfo.id)

      // 10. Crear customerData para el contexto de OpenAI
      const customerDataForContext = {
        email: customerInfo.email,
        name: customerInfo.name,
        phone: customerInfo.phone
      }

      // 11. Generar contexto completo para OpenAI
      const systemPrompt = generateOpenAIContext(
        chatBotDomain, 
        customerDataForContext, 
        contextSpecificPrompt, 
        id, 
        customerInfo
      )

      // 12. OPTIMIZACI√ìN: Usar solo historial relevante (√∫ltimos 10 mensajes)
      const relevantHistory = getRelevantChatHistory(chat, 10)
      console.log(`üìä Historial reducido: ${chat.length} ‚Üí ${relevantHistory.length} mensajes`)

      // 13. Obtener respuesta de OpenAI
      const chatCompletion = await openai.chat.completions.create({
        messages: [
          { role: 'system', content: systemPrompt },
          ...relevantHistory, // ‚úÖ Solo √∫ltimos 10 mensajes
          { role: 'user', content: message }
        ],
        model: 'gpt-3.5-turbo',
        temperature: 0.7,
        max_tokens: 300 // ‚úÖ Reducido de 500 a 300
      })

      // 14. Manejar respuesta de OpenAI
      const response = chatCompletion.choices[0].message.content
      const result = await handleOpenAIResponse(response, customerInfo, chat)

      // 15. Almacenar respuesta del asistente con m√©tricas
      await onStoreConversations(
        customerInfo.chatRoom[0].id,
        result.response.content,
        'assistant',
        message // Pasar mensaje del usuario para evaluar efectividad
      )

      // 16. FR3: Actualizar tipo de resoluci√≥n
      await updateResolutionType(customerInfo.chatRoom[0].id, false)

      // 17. FR4: Verificar si debemos solicitar calificaci√≥n
      const askSatisfaction = await shouldAskForSatisfaction(customerInfo.chatRoom[0].id)
      
      if (askSatisfaction) {
        // Agregar solicitud de calificaci√≥n a la respuesta
        const responseWithSatisfactionRequest = {
          ...result,
          response: {
            ...result.response,
            content: `${result.response.content}\n\n---\n\n¬øC√≥mo calificar√≠as la atenci√≥n que recibiste del 1 al 5? (1 = Muy insatisfecho, 5 = Muy satisfecho)`
          }
        }
        return responseWithSatisfactionRequest
      }

      return result
    }

    // 16. Si NO hay email en ning√∫n lugar, pedir datos
    console.log('‚ùå No se encontr√≥ email, solicitando datos')
    
    // Verificar si es una solicitud de agendamiento sin email
    const isAppointment = isAppointmentRequest(message)
    if (isAppointment) {
      return {
        response: {
          role: 'assistant',
          content: 'Para agendar tu cita, necesito que me proporciones tu correo electr√≥nico. Por favor, comp√°rtelo conmigo.'
        }
      }
    }
    
    // Flujo normal de pedir datos
    return await handleNoEmailFlow(message, chat)

  } catch (error) {
    console.log('Error en onAiChatBotAssistant:', error)
    return {
      response: {
        role: 'assistant',
        content: 'Lo siento, estoy teniendo dificultades t√©cnicas en este momento. ¬øPodr√≠as intentar de nuevo en unos momentos?'
      }
    }
  }
}
